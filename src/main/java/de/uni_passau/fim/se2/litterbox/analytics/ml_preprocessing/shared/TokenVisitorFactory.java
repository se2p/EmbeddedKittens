/*
 * Copyright (C) 2019-2022 LitterBox contributors
 *
 * This file is part of LitterBox.
 *
 * LitterBox is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * LitterBox is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LitterBox. If not, see <http://www.gnu.org/licenses/>.
 */
package de.uni_passau.fim.se2.litterbox.analytics.ml_preprocessing.shared;

import de.uni_passau.fim.se2.litterbox.analytics.ml_preprocessing.util.StringUtil;
import de.uni_passau.fim.se2.litterbox.ast.model.ASTNode;

public final class TokenVisitorFactory {
    private static final String DEFAULT_DELIMITER = "_";

    private TokenVisitorFactory() {
        throw new IllegalCallerException("utility class");
    }

    /**
     * Builds the default token visitor.
     *
     * @param normalise If true, {@link StringUtil#normaliseString(String)} is used to normalise user-defined values.
     * @return A token visitor that can be used in {@link #getToken(BaseTokenVisitor, ASTNode)}.
     */
    public static BaseTokenVisitor getDefaultTokenVisitor(final boolean normalise) {
        return getDefaultTokenVisitorWithDelimiter(normalise, DEFAULT_DELIMITER);
    }

    /**
     * Builds the default token visitor with the given delimiter.
     *
     * @param normalise If true, {@link StringUtil#normaliseString(String, String)} is used to normalise user-defined
     *                  values with the given delimiter.
     * @return A token visitor that can be used in {@link #getToken(BaseTokenVisitor, ASTNode)}.
     */
    public static BaseTokenVisitor getDefaultTokenVisitorWithDelimiter(final boolean normalise, String delimiter) {
        return new BaseTokenVisitor(normalise) {
            @Override
            protected String normaliseToken(String token) {
                return StringUtil.normaliseString(token, delimiter);
            }
        };
    }

    /**
     * Applies the given token visitor to the AST node and returns the extracted token.
     *
     * @param visitor Some token visitor.
     * @param node Some AST node.
     * @return The token as generated by the visitor.
     */
    public static String getToken(final BaseTokenVisitor visitor, final ASTNode node) {
        node.accept(visitor);
        return visitor.getToken();
    }

    /**
     * Retrieves the token representing the given node.
     *
     * <p>Uses the default non-normalising token visitor as described in {@link #getDefaultTokenVisitor(boolean)}.
     *
     * @param node A node of the AST.
     * @return The token representing the given node.
     */
    public static String getToken(final ASTNode node) {
        return getToken(getDefaultTokenVisitor(false), node);
    }

    /**
     * Retrieves the normalised token representing the given node.
     *
     * <p>Uses the default normalising token visitor as described in {@link #getDefaultTokenVisitor(boolean)}.
     *
     * @param node A node of the AST.
     * @return The normalised token representing the given node.
     */
    public static String getNormalisedToken(final ASTNode node) {
        return getNormalisedTokenWithDelimiter(node, DEFAULT_DELIMITER);
    }

    /**
     * Retrieves the normalised token representing the given node with the given delimiter between the subtokens.
     *
     * <p>Uses the default normalising token visitor with delimiter as described in
     * {@link #getDefaultTokenVisitorWithDelimiter(boolean, String)}.
     *
     * @param node A node of the AST.
     * @param delimiter The delimiter that should be used to separate the subtokens.
     * @return The normalised token representing the given node.
     */
    public static String getNormalisedTokenWithDelimiter(final ASTNode node, String delimiter) {
        return getToken(getDefaultTokenVisitorWithDelimiter(true, delimiter), node);
    }
}
