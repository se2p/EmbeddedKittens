/*
 * Copyright (C) 2021-2024 EmbeddedKittens contributors
 *
 * This file is part of EmbeddedKittens.
 *
 * EmbeddedKittens is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * EmbeddedKittens is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with EmbeddedKittens. If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-FileCopyrightText: 2021-2024 EmbeddedKittens contributors
 * SPDX-License-Identifier: GPL-3.0-or-later
 */
package de.uni_passau.fim.se2.embedded_kittens.shared;

import java.util.Locale;
import java.util.Objects;

import de.uni_passau.fim.se2.litterbox.ast.model.ASTNode;
import de.uni_passau.fim.se2.litterbox.ast.model.event.EventAttribute;
import de.uni_passau.fim.se2.litterbox.ast.model.expression.num.NumFunct;
import de.uni_passau.fim.se2.litterbox.ast.model.expression.string.NameNum;
import de.uni_passau.fim.se2.litterbox.ast.model.expression.string.attributes.FixedAttribute;
import de.uni_passau.fim.se2.litterbox.ast.model.extensions.music.drums.FixedDrum;
import de.uni_passau.fim.se2.litterbox.ast.model.extensions.music.instruments.FixedInstrument;
import de.uni_passau.fim.se2.litterbox.ast.model.extensions.music.notes.FixedNote;
import de.uni_passau.fim.se2.litterbox.ast.model.extensions.texttospeech.language.FixedLanguage;
import de.uni_passau.fim.se2.litterbox.ast.model.extensions.texttospeech.voice.FixedVoice;
import de.uni_passau.fim.se2.litterbox.ast.model.extensions.translate.tlanguage.TFixedLanguage;
import de.uni_passau.fim.se2.litterbox.ast.model.identifier.StrId;
import de.uni_passau.fim.se2.litterbox.ast.model.literals.BoolLiteral;
import de.uni_passau.fim.se2.litterbox.ast.model.literals.ColorLiteral;
import de.uni_passau.fim.se2.litterbox.ast.model.literals.NumberLiteral;
import de.uni_passau.fim.se2.litterbox.ast.model.literals.StringLiteral;
import de.uni_passau.fim.se2.litterbox.ast.model.statement.actorlook.GraphicEffect;
import de.uni_passau.fim.se2.litterbox.ast.model.statement.actorsound.SoundEffect;
import de.uni_passau.fim.se2.litterbox.ast.model.statement.spritelook.ForwardBackwardChoice;
import de.uni_passau.fim.se2.litterbox.ast.model.statement.spritelook.LayerChoice;
import de.uni_passau.fim.se2.litterbox.ast.model.statement.spritemotion.DragMode;
import de.uni_passau.fim.se2.litterbox.ast.model.statement.spritemotion.RotationStyle;
import de.uni_passau.fim.se2.litterbox.ast.model.timecomp.TimeComp;
import de.uni_passau.fim.se2.litterbox.ast.visitor.*;

/**
 * Visits a single given node of the AST to generate a token for that node.
 *
 * <p>
 * See {@link TokenVisitorFactory} for additional related utilities and a default implementation.
 */
public abstract class BaseTokenVisitor implements
    ScratchVisitor, PenExtensionVisitor, MusicExtensionVisitor, TranslateExtensionVisitor,
    TextToSpeechExtensionVisitor {

    protected final boolean normalised;

    protected String finalToken = null;

    protected BaseTokenVisitor(final boolean normalised) {
        this.normalised = normalised;
    }

    /**
     * Retrieves the generated token.
     *
     * @return The token generated by visiting an AST node.
     * @throws NullPointerException If no AST node has been visited by the visitor before calling this method.
     */
    public final String getToken() {
        return Objects.requireNonNull(finalToken, "The token visitor has to visit a node first!");
    }

    protected abstract String normaliseToken(String token);

    /**
     * If normalisation is enabled, converts the token using {@link #normaliseToken(String)}, otherwise saves the token
     * as-is into the {@link #finalToken} attribute.
     *
     * @param token A token that should be saved.
     */
    protected void saveToken(final String token) {
        if (normalised) {
            this.finalToken = normaliseToken(token);
        }
        else {
            this.finalToken = token;
        }
    }

    /**
     * Removes the decimal places from integral numbers, formats others to two decimal places. Same format with or
     * without normalisation.
     *
     * @param value Some number that should be saved as {@link #finalToken}.
     */
    protected void saveNumber(final double value) {
        if (Math.floor(value) == value) {
            finalToken = Integer.toString((int) value);
        }
        else {
            finalToken = String.format(Locale.ROOT, "%.2f", value);
        }
    }

    @Override
    public void visit(ASTNode node) {
        finalToken = node.getUniqueName();
    }

    @Override
    public void visit(StringLiteral node) {
        saveToken(node.getText());
    }

    @Override
    public void visit(StrId node) {
        saveToken(node.getName());
    }

    @Override
    public void visit(BoolLiteral node) {
        finalToken = Boolean.toString(node.getValue());
    }

    @Override
    public void visit(NumberLiteral node) {
        saveNumber(node.getValue());
    }

    @Override
    public void visit(TimeComp node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(SoundEffect node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(RotationStyle node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(NumFunct node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(NameNum node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(LayerChoice node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(GraphicEffect node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(ForwardBackwardChoice node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(EventAttribute node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(DragMode node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(FixedAttribute node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(FixedNote node) {
        saveNumber(node.getNote());
    }

    @Override
    public void visit(FixedInstrument node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(FixedDrum node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(TFixedLanguage node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(ColorLiteral node) {
        finalToken = node.getRGB();
    }

    @Override
    public void visit(FixedVoice node) {
        finalToken = node.getType().toString();
    }

    @Override
    public void visit(FixedLanguage node) {
        finalToken = node.getType().toString();
    }
}
