ambiguous_custom_block_signature=[b]Problem:[/b] [newLine] The names for your custom blocks are non-unique. Your program cannot distinguish between the blocks with the same name. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Always use unique names for custom blocks.
ambiguous_parameter_name_unused=[b]Problem:[/b] [newLine] The parameter names of your custom blocks are non-unique. Your program cannot distinguish between the parameters with the same name. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Always use unique names for parameters.
ambiguous_parameter_name_used=[b]Problem:[/b] [newLine] The parameter names of your custom blocks are non-unique. Your program cannot distinguish between the parameters with the same name. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Always use unique names for parameters.
backdrop_switch=Well done! You use the backdrop change event to start different scripts. That allows you to perform different actions depending on the backdrop of the game.
blocking_if_else=[b]Problem:[/b] [newLine] You are using [sbi]stop [all v][/sbi] or [sbi]stop [this script v][/sbi] blocks in both the [IF] and [ELSE] branch of this block. So the script terminates either way. The blocks after the [sbi]if < > then[/sbi] block are never executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use the stop command in only one branch or remove the blocks after the [sbi]if < > then[/sbi] block.
blocking_if_else_inside_loop=[b]Problem:[/b] [newLine] You are using [sbi]stop [all v][/sbi] or [sbi]stop [this script v][/sbi] blocks in both the [IF] and [ELSE] branch of this block. So the script terminates either way. The loop outside the [sbi]if < > then[/sbi] block is executed incorrectly. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use the stop command in only one branch or remove the loop.
boolean_expression=Nice! You are using boolean expressions in your program.
busy_waiting_all=[b]Problem:[/b] [newLine] In your script you are constantly checking a condition, just to stop everything once the condition is met. There is a better solution in Scratch. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use the [sbi]wait until < >[/sbi] block instead of the loop and the conditional statement to wait for the condition to be fulfilled.
busy_waiting_clone=[b]Problem:[/b] [newLine] In your script you are constantly checking a condition, just to delete the clone once the condition is met. There is a better solution in Scratch. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use the [sbi]wait until < >[/sbi] block instead of the loop and the conditional statement to wait for the condition to be fulfilled.
busy_waiting_script=[b]Problem:[/b] [newLine] In your script you are constantly checking a condition, just to stop the script once the condition is met. There is a better solution in Scratch. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use the [sbi]wait until < >[/sbi] block instead of the loop and the conditional statement to wait for the condition to be fulfilled.
call_without_definition=[b]Problem:[/b] [newLine] You are using a custom block [sbi]%BLOCKNAME[/sbi] which no longer exists. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Delete all instances where the deleted custom block is used. If you need a costum block, create a new one and then add it to your code.
clone_type_1=[b]Problem:[/b] [newLine] There are identical statements in multiple scripts. Code duplication makes your program error-prone and confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Create and use a custom block to simplify the code.
clone_type_2=[b]Problem:[/b] [newLine] There are similar statements in multiple scripts, differing only in parameters. Code duplication makes your program error-prone and confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Create and use a custom block to simplify the code.
clone_type_3=[b]Problem:[/b] [newLine] There is similar code in multiple scripts. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Create and use a custom block to simplify the code.
collision=Well done! Your sprite reacts to collisions.
comparing_literals_default_false=[b]Problem:[/b] [newLine] You are comparing two texts where the result is always [FALSE]. Consequently, the code inside the [sbi]%THENELSE[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Change the comparison to something meaningful or remove the control structure.
comparing_literals_default_true=[b]Problem:[/b] [newLine] You are comparing two texts where the result is always [TRUE]. Consequently, your code inside the [sbi]%THENELSE[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the block.
comparing_literals_default_variable=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. Consequently, the code inside the [sbi]%THENELSE[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use a variable [var]%VARIABLE[/var] for the comparison? If so, go to the variables toolbox to create a variable [var]%VARIABLE[/var]. Then, drag and drop the [var]%VARIABLE[/var] block into the comparison slot.
comparing_literals_default_variable_exists=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. Consequently, the code inside the [sbi]%THENELSE[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use the variable [var]%VARIABLE[/var] for the comparison? If so, drag and drop the block for this variable into the comparison slot.
comparing_literals_default_variable_exists_two=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. Consequently, the code inside the [sbi]%THENELSE[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use the variable [var]%VARIABLE1[/var] or the variable [var]%VARIABLE2[/var] for the comparison? If so, drag and drop the block for the corresponding variable into the comparison slot.
comparing_literals_default_variable_exists_two_without_information=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use the variable [var]%VARIABLE1[/var] or the variable [var]%VARIABLE2[/var] for the comparison? If so, drag and drop the block for the corresponding variable into the comparison slot.
comparing_literals_default_variable_exists_without_information=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use the variable [var]%VARIABLE[/var] for the comparison? If so, drag and drop the block for this variable into the comparison slot.
comparing_literals_default_variable_two=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. Consequently, the code inside the [sbi]%THENELSE[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use the variable [var]%VARIABLE1[/var] or the variable [var]%VARIABLE2[/var] for the comparison? If so, go to the variables toolbox to create the variables. Then, drag and drop the block for the corresponding variable into the comparison slot.
comparing_literals_default_variable_two_without_information=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use the variable [var]%VARIABLE1[/var] or the variable [var]%VARIABLE2[/var] for the comparison? If so, go to the variables toolbox to create the variables. Then, drag and drop the block for the corresponding variable into the comparison slot.
comparing_literals_default_variable_without_information=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use a variable [var]%VARIABLE[/var]? If so, go to the variables toolbox to create a variable [var]%VARIABLE[/var]. Then, drag and drop the [var]%VARIABLE[/var] block into the comparison slot.
comparing_literals_default_without_information=[b]Problem:[/b] [newLine] You are comparing two texts where the result is always %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Change the comparison to something meaningful or remove the control structure.
comparing_literals_wait_false=[b]Problem:[/b] [newLine] You are comparing two texts where the result is always [FALSE]. The blocks after the [sbi]wait until < >[/sbi] block will %ALWAYSNEVER be executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Change the comparison to something meaningful or remove the control structure.
comparing_literals_wait_true=[b]Problem:[/b] [newLine] You are comparing two texts where the result is always [TRUE]. The blocks after the [sbi]wait until < >[/sbi] block will %ALWAYSNEVER be executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the block.
comparing_literals_wait_variable=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. Consequently, the code after the [sbi]wait until < >[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use a variable [var]%VARIABLE[/var]for the comparison? If so, go to the variables toolbox to create a variable [var]%VARIABLE[/var]. Then, drag and drop the [var]%VARIABLE[/var] block into the comparison slot.
comparing_literals_wait_variable_exists=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. Consequently, the code after the [sbi]wait until < >[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use the variable [var]%VARIABLE[/var] for the comparison? If so, drag and drop the block for this variable into the comparison slot.
comparing_literals_wait_variable_exists_two=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. Consequently, the code after the [sbi]wait until < >[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] for the comparison? If so, drag and drop the block for the corresponding variable into the comparison slot.
comparing_literals_wait_variable_two=[b]Problem:[/b] [newLine] The comparison will always return %TRUEFALSE%ADDINFODICT. Consequently, the code after the [sbi]wait until < >[/sbi] block is %ALWAYSNEVER executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you intend to use a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] for the comparison? If so, go to the variables toolbox to create the variables. Then, drag and drop the block for the corresponding variable into the comparison slot.
conditional_inside_loop=Great! You check for certain conditions within a loop, which means you combine important control blocks. This can help you solve advanced problems.
controlled_broadcast_or_stop=Well done! To have more control over your program, you continuously check for certain conditions before broadcasting or stopping the program/script.
coordination=Very good! You can coordinate your scripts within the program very well! That is very important for larger programs. The best way is using broadcasts and [sbi]wait until < >[/sbi] blocks.
correct_broadcast=Well done! You correctly implemented a broadcast, now you can easily coordinate your scripts.
custom_block_usage=Very good! You created a custom block and also use it in your program.
custom_block_with_forever=[b]Problem:[/b] [newLine] The custom block [sbi]%METHOD[/sbi] contains a [sbi]forever[/sbi] loop without any condition for termination. If you call the [sbi]%METHOD[/sbi] block, the program execution remains within this block and never leaves it. The statements following the [sbi]%METHOD[/sbi] block will never be executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Add a condition for termination to the loop.
custom_block_with_termination=[b]Problem:[/b] [newLine] The custom block [sbi]%METHOD[/sbi] contains a [sbi]stop [all v][/sbi] block or a [sbi]delete this clone[/sbi] block. Therefore, the blocks following the [sbi]%METHOD[/sbi] block in [bc]another script[/bc] will never be executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the [sbi]stop [all v][/sbi] block or the [sbi]delete this clone[/sbi] block or use an [sbi]if < > then[/sbi] block in order to not stop in every execution.
dead_code=[b]Problem:[/b] [newLine] Your project contains blocks that are not connected to an event block. That means, they will never be executed. This makes the project confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the blocks if you do not need them. If you want them to be executed, then insert them in the appropriate place in the rest of the code or connect them to an event block.
delete_clone_in_loop=[b]Problem:[/b] [newLine] Your code deletes the clone in the first iteration of the loop. So the loop is unnecessary and your program is confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the loop.
directed_motion=Well done! Your sprite can be moved by pressing keys. This is an important concept for most computer games.
double_if=[b]Problem:[/b] [newLine] Your project contains two consecutive conditional statements with the same condition. It is unnecessary to check the condition twice. This makes the project confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Merge the two conditional statements into only one conditional statement.
duplicate_sprite=[b]Problem:[/b] [newLine] Your project contains exact copies of the same sprite. This makes your project confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Create clones of the sprite that you want to have multiple times.
duplicated_script=[b]Problem:[/b] [newLine] Your project contains one identical script twice. This makes your project confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Delete one of the scripts.
duplicated_scripts_covering=[b]Problem:[/b] [newLine] Your project contains one identical script twice. Also, the scripts overlap exactly, so you may be not aware of it. This can lead to unexpected behaviour of your program. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Delete one of the scripts.
empty_control_body=[b]Problem:[/b] [newLine] You used a [sbi]%BLOCKNAME[/sbi] block, which does not contain any blocks. Consequently, nothing happens when this block is invoked. This makes your code confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Consider deleting the block if you do not need it.
empty_custom_block=[b]Problem:[/b] [newLine] You created a custom block [sbi]%BLOCKNAME[/sbi] which contains no statements. When the custom block is invoked, nothing happens. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the block or insert suitable blocks into the definition.
empty_project=[b]Problem:[/b] [newLine] The project is completely empty. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Start your project by adding a first sprite.
empty_script=[b]Problem:[/b] [newLine] Your sprite contains an event block [sbi]%BLOCKNAME[/sbi] without any other blocks being connected to it. When the event occurs, nothing will happen. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the block if nothing should happen. If you want something to happen, then connect other blocks to the event block.
empty_sprite=[b]Problem:[/b] [newLine] The sprite %SPRITE contains no blocks. It cannot react to any user input or sprite interaction. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] If this is intended, leave it as is. Otherwise, drag and drop suitable blocks into the programming space of this sprite.
endless_recursion_broadcast=[b]Problem:[/b] [newLine] The script that reacts to the message [bc]%MESSAGE[/bc] sends this message again. Therefore, the script will be executed infinitely often in a row. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Add a condition for termination to this script.
endless_recursion_procedure=[b]Problem:[/b] [newLine] The custom block [sbi]%BLOCKNAME[/sbi] uses this block itself. Therefore, the block will be executed infinitely often in a row. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Add a condition for termination to the code of the custom block.
expression_as_touching_or_color=[b]Problem:[/b] [newLine] This block expects a colour or a sprite as parameter and does not work with strings or numbers. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the inserted block and choose a colour or one of the given options instead.
forever_inside_if=[b]Problem:[/b] [newLine] The loop [sbi]forever[/sbi] is never left. The blocks outside of the loop (also the blocks following the [sbi]if < > then[/sbi] block) are never executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Try omitting the inner loop. Maybe switching the two control structures can help.
forever_inside_loop=[b]Problem:[/b] [newLine] The inner loop [sbi]forever[/sbi] is never left. All blocks outside of the loop are never executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Try omitting the inner loop.
gliding_motion=Well done! By pressing a key, you can make your sprite glide into a certain direction. This is an important concept for many computer games.
hide_without_show=[b]Problem:[/b] [newLine] Your program uses a [sbi]hide[/sbi] block, but no [sbi]show[/sbi] block. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] If you want the sprite to be visible again later on, insert a [sbi]show[/sbi] block into a suitable place.
illegal_parameter_refactor=[b]Problem:[/b] [newLine] The parameter has the wrong type. By editing the custom block, the type of the parameter has been changed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Chose a suitable type for the parameter and then drag and drop the parameter into its place once again.
immediate_delete_clone_after_broadcast=[b]Problem:[/b] [newLine] The script deletes the clone immediately after the [sbi]broadcast (%MESSAGE v)[/sbi] block. The script that is invoked by the message and starts with a [sbi]when I receive [%MESSAGE v][/sbi] block, will not be executed correctly for this clone of the sprite %SPRITE. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use a [sbi]broadcast (%MESSAGE v) and wait[/sbi] block instead.
immediate_stop_after_say_think=[b]Problem:[/b] [newLine] The script stops everything immediately after the [sbi]%SAYTHINK[/sbi] block. The text is never shown. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Replace the [sbi]%SAYTHINK[/sbi] block with a [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block. To make the rest of the program stop immediately, insert a [sbi]stop [other scripts in sprite v][/sbi] before the [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block.
immediate_stop_after_say_think_multiple=[b]Problem:[/b] [newLine] The script stops everything immediately after the [sbi]%SAYTHINK[/sbi] block. The text is never shown. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Replace the [sbi]%SAYTHINK[/sbi] block with a [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block. To make the rest of the program stop immediately, insert a [sbi]stop [other scripts in sprite v][/sbi] block before the [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block. If you want to stop the scripts of other sprites, while the [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block is executed, you have to inform these sprites by using a [sbi]broadcast (message v)[/sbi] block, that they shall stop their scripts.
inappropriate_handler_delete_clone=[b]Problem:[/b] [newLine] The script contains a [sbi]delete this clone[/sbi] block, but it cannot be executed because it is not clear which clone the event block [sbi]%EVENTHANDLER[/sbi] should affected. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Start the script with a [sbi]when I start as a clone[/sbi] or [sbi]when this sprite clicked[/sbi] block. Another possibility is to move the [sbi]delete this clone[/sbi] block to [bc]another script[/bc] that starts with one of these blocks.
initialisation_of_looks_sprite=Well done! You initialize the looks of your sprite with every new program start.
initialisation_of_looks_stage=Well done! You initialize the looks of your stage with every new program start.
initialisation_of_position=Well done! You initialize the location of your sprite with every new program start.
interrupted_loop_sensing=[b]Problem:[/b] [newLine] The [sbi]%BLOCKNAME[/sbi] block interrupts the checking of the condition in the [sbi]%THENELSE[/sbi] block. It can happen that the condition is fulfilled but your script does not react accordingly because it is busy executing the [sbi]%BLOCKNAME[/sbi] block. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Try checking the condition in a parallel script (this means in [bc]another script[/bc]).
key_set_position=[b]Problem:[/b] [newLine] Your program sets the position of the sprite to a certain value everytime you press the key %KEY. Probably, yo tried to move the sprite by a certain value. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use the block [sbi]change %XY by ( )[/sbi] to move the sprite.
list_usage=Well done! You use a list and therefore can handle collections.
long_script=[b]Problem:[/b] [newLine] The script is very long. This makes the code confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Try to divide the script into two or more shorter scripts: Each script should be responsible for one subtask of your program. That makes it easy to keep the overview.
loop_one=[b]Problem:[/b] [newLine] The loop is executed only once. Thus, the loop is unnecessary and makes your code complicated. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the loop block.
loop_sensing=Well done! You are using a forever loop to continuously check for the occurrence of a certain event.
loop_zero=[b]Problem:[/b] [newLine] The loop is never executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] If this is intended, your code is unnecessarily complicated. Remove the loop block and the blocks inside it. If you do want the loop to be executed, you might have to change a condition or alter the code before the loop.
matching_parameter=Good! You initialize a parameter and use it afterwards.
message_naming=[b]Problem:[/b] [newLine] The message [bc]%MESSAGE[/bc] does not have a meaningful name. You are using the default name or one that has already been used, followed by a number. This makes your program hard to understand. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use meaningful and unique names for messages.
message_never_received=[b]Problem:[/b] [newLine] The message [bc]%MESSAGE[/bc] is sent, but never received by a [sbi]when I receive [message v] [/sbi] block. So there is no reaction to this message. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Add a script to the sprite that should react to the message. The script has to start with the [sbi]when I receive [message v] [/sbi] block. If no reaction is intended, the message is meaningless. Remove the message.
message_never_sent=[b]Problem:[/b] [newLine] The message [bc]%MESSAGE[/bc] that is supposed to be received is never sent. Therefore, this script will never be triggered. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Make sure that the message is sent from [bc]another script[/bc] beforehand. You need a [sbi]broadcast (%MESSAGE v)[/sbi] block for this.
message_never_sent_say_think=[b]Problem:[/b] [newLine] The message %MESSAGE that is supposed to be received is never sent. Therefore, this script will never be triggered. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You are using the message as text in a [sbi]%SAYTHINK ( )[/sbi] or [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block in the following sprites: %SPRITES. Also use a [sbi]broadcast (%MESSAGE v)[/sbi] block in these sprites in order to inform everyone.
message_never_sent_touching=[b]Problem:[/b] [newLine] The message %MESSAGE that is supposed to be received is never sent. Therefore, this script will never be triggered. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You are using a [sbi]touching (%SPRITE v)?[/sbi] block in the following sprites: %SPRITES. Also use a [sbi]broadcast (%MESSAGE v)[/sbi] block in these sprites in order to inform everyone about the collision.
middle_man_broadcast=[b]Problem:[/b] [newLine] This script is waiting for a message, only to immediately send another message. Therefore, this script is just a middle man between the original sender and the final receiver. This makes your program hard to understand. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] The script that waits for the message from the middle man can wait for the original message instead. Then you can delete this script in order to avoid redundant code.
middle_man_procedure=[b]Problem:[/b] [newLine] When this custom block is executed, only another block is called. Therefore, this custom block is just a middle man between the original caller and the final block. This makes your program hard to understand. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] The call of the custom block can be changed to a call of the final block. Then you can delete this custom block in order to avoid redundant code.
#
# TODO
missing_ask=[b]Problem:[/b] [newLine] Your project uses the [sbi](answer)[/sbi] block, but the [sbi]ask ( ) and wait[/sbi] block is never used in the project. The [sbi](answer)[/sbi] block can not return a meaningful value. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use the [sbi]ask ( ) and wait[/sbi] block before the first instance of [sbi]answer[/sbi].
missing_backdrop_switch=[b]Problem:[/b] [newLine] If the [sbi]When backdrop switches to [ v][/sbi] block is used to start a script and the backdrop never switches to the selected one, the script is never executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Make sure to change the backdrop in your project.
missing_clone_call=[b]Problem:[/b] [newLine] If the [sbi]When I start as a clone[/sbi] block is used to start a script, but the sprite is never cloned, the event will never be triggered and the script will not be executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Make sure to use a clone block for this sprite.
missing_clone_initialization=[b]Problem:[/b] [newLine] When a sprite is cloned but it has no scripts started by [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] events, clones will not perform any actions. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Maybe you want to use one of those event handlers in your project. Otherwise you could use the [sbi]stamp[/sbi] block in the pen extension if the clone should only be visible.
missing_clone_initialization_delete_clone=[b]Problem:[/b] [newLine] When you clone a sprite but it has no scripts started by [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi], the clone is unable to perform any actions. You are using a [sbi]delete this clone[/sbi] in a script of %SPRITE. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Consider starting that script with a [sbi]When I start as a clone[/sbi] or a [sbi]When this sprite clicked[/sbi] block.
missing_clone_initialization_delete_clone_message=[b]Problem:[/b] [newLine] When a sprite is cloned but it has no scripts started by [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. You are using a [sbi]delete this clone[/sbi] block in a script of %SPRITE that starts with message [bc]%MESSAGE[/bc]. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Search the sprite %SPRITE for the script sending the message [bc]%MESSAGE[/bc]. Consider starting that script with a [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] block instead of the [sbi]%EVENTHANDLER[/sbi] block.
missing_clone_initialization_delete_clone_message_multiple=[b]Problem:[/b] [newLine] When a sprite is cloned but it has no scripts started by [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. You are using a [sbi]delete this clone[/sbi] block in a script of %SPRITE that starts with message [bc]%MESSAGE[/bc]. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Search the sprite %SPRITE for the scripts sending the message [bc]%MESSAGE[/bc]. Consider starting that scripts with a [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] block instead of the [sbi]%EVENTHANDLER[/sbi] blocks.
missing_erase_all=[b]Problem:[/b] [newLine] If a sprite uses a pen down block but never an erase all block, then all drawings from a previous execution remain for the next run too. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Maybe you should use an [sbi]erase all[/sbi] block after your hat block.
missing_initialization=[b]Problem:[/b] [newLine] In this sprite, %VARIABLE is not initialized before it is used the first time. It will use whatever value it contained at the end of the last run. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Initialize the %VARIABLE by assigning the desired initial value at the beginning of a suitable script.
missing_initialization_clone=[b]Problem:[/b] [newLine] In this sprite, %VARIABLE is not initialized before it is used the first time. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Initialize the %VARIABLE by assigning the desired initial value at the beginning of a suitable script.
missing_loop_mouse_position_direction=[b]Problem:[/b] [newLine] Your code attempts to turn the sprite to the mouse pointer, but only does this once. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You might want to do this continuously for the entire duration while the project is running. For this you have to continuously execute the direction change and not just once. You have to wrap the direction block into a [sbi]forever[/sbi] block for this continuous change.
missing_loop_mouse_position_motion=[b]Problem:[/b] [newLine] Your code attempts to move the sprite towards the mouse position, but only does this once. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You might want to do this continuously for the entire duration while the project is running. For this you have to continuously execute the movement and not just once. You have to wrap the motion block into a [sbi]forever[/sbi] block for this continuous movement.
missing_loop_sensing=[b]Problem:[/b] [newLine] The highlighted event in the script is only checked once. The script is ending too fast. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Enclose the event with the block [sbi]forever[/sbi], to continuously check for the event.
missing_loop_sensing_variable=[b]Problem:[/b] [newLine] Your script should execute actions when the variable has a specific value. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You have to check for this event continuously inside a [sbi]forever[/sbi] loop for not missing the event.
missing_pen_down=[b]Problem:[/b] [newLine] You use the [sbi]pen down[/sbi] block but you never lift the pen again, so your sprite will draw forever. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Make sure to use a [sbi]pen up[/sbi] block in the sprite.
missing_pen_up=[b]Problem:[/b] [newLine] You use the [sbi]pen up[/sbi] block but your sprite has never set the pen down before. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Make sure to use a [sbi]pen down[/sbi] block if you want to draw something.
missing_resource=[b]Problem:[/b] [newLine] Your program is missing the sound or picture you're trying to use. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Select another sound or image or add the one you intend to use.
missing_termination=[b]Problem:[/b] [newLine] The [sbi]repeat until < >[/sbi] blocks require a stopping condition. If the condition is missing, the result is an infinite loop. This will then prevent the execution of blocks following the loop in the script. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
missing_wait_condition=[b]Problem:[/b] [newLine] The [sbi]wait until < >[/sbi] blocks require a condition. If the condition is missing, the block will wait forever and the following code is never executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
#TODO END
#
mouse_follower=Super! Your sprite follows the mouse. This is a good concept for a lot of games.
movement_in_loop=Well done! The movements of your sprite are very fluent and natural because you implemented the moves in a loop.
multiple_attribute_modifications=[b]Problem:[/b] [newLine] There are multiple changes to the same variable or attribute in a row. When executing the programm, only the last change has visible effects. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Combine the changes to only one change.
multiple_attribute_modifications_custom=[b]Problem:[/b] [newLine] There are multiple changes to %VARIABLE in a row. When executing the programm, only the last change has visible effects. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Combine the changes to only one change.
multiple_attribute_modifications_saythink=[b]Problem:[/b] [newLine] There are multiple [sbi]say ( )[/sbi] or [sbi]think ( )[/sbi] blocks in a row, without delay. When executing the programm, only the last block has visible effects. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use [sbi]say ( ) for ( ) seconds[/sbi] or [sbi]think ( ) for ( ) seconds[/sbi] blocks instead.
nested_conditional_checks=Very good! You are using nested conditions, such as nested [sbi]if < > then[/sbi] blocks. This helps you solve more advanced problems.
nested_loops=[b]Problem:[/b] [newLine] Nested loops can lead to unpredictable problems. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Try to remove not necessary loops.
nested_loops_perfume=Very good! You are using nested loops. This helps you solve more advanced problems.
no_working_scripts=[b]Problem:[/b] [newLine] Your sprite contains loose blocks. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Connect the blocks to a hat block so that the sprite reacts to the corresponding event.
object_follower=Super! Your sprite follows other objects. This is a good concept for a lot of games.
orphaned_parameter=[b]Problem:[/b] [newLine] In your custom block, you are using a parameter which does not exist (any more). [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] When you delete a once created parameter later on, be sure to remove all usages of this parameter. If you decide to use the parameter again, you have to re-add the parameter to your custom block.
parallelisation=Great! At least two scripts are triggered by the same event. This means you are using the concept of parallelization.
parameter_out_of_scope=[b]Problem:[/b] [newLine] A parameter can only be used within the custom block. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] If you want to use the value of the parameter outside of the custom block, you have to store the value in a variable.
#
# TODO
position_equals_check=[b]Problem:[/b] [newLine] A sprite's position is usually defined by its center. It is unlikely that the %COORDINATE coordinate of an object has the exact value of the comparison. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Instead try to use an approximation with [LEQ] or [GEQ].
position_equals_check_dist=[b]Problem:[/b] [newLine] A sprite's position is usually defined by its center. It is unlikely that the distance between two objects has the exact value of the comparison. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Instead try to use an approximation with [LEQ] or [GEQ].
position_equals_check_zero_mouse=[b]Problem:[/b] [newLine] The distance between a sprite and the mouse-pointer is usually measured from center to center. It is unlikely that the center points of mouse-pointer and sprite will ever be exactly on top of each other. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Instead remove the [EQ] block and try to use a suitable approximation with [LEQ] or use a touching-block [sbi]touching ( v)?[/sbi], [sbi]touching color [#11ff33]?[/sbi], [sbi]color [#11ff33] is touching [#11ff33]?[/sbi] from the sensing toolbox.
position_equals_check_zero_sprites=[b]Problem:[/b] [newLine] The distance between two sprites is usually measured from center to center. It is very unlikely that the centers of two sprites will ever be exactly on top of each other. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Remove the [EQ] and instead use a suitable approximation with [LEQ] or use a touching-block [sbi]touching ( v)?[/sbi], [sbi]touching color [#11ff33]?[/sbi], [sbi]color [#11ff33] is touching [#11ff33]?[/sbi] from the sensing toolbox.
recursive_cloning=[b]Problem:[/b] [newLine] Scripts starting with [sbi]When I start as a clone[/sbi] should not create clones of itself. This could result in an infinite number of clones.  [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
same_variable_different_sprite=[b]Problem:[/b] [newLine] The same variable name is used in multiple sprites. This can be confusing. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Make sure, that you use unique names for your variables.
say_sound_synchronisation=Super! To make your sprite talk, you play a sound at the same time a speech bubble appears. That is a great feature for games.
sequential_actions=[b]Problem:[/b] [newLine] Your script contains a sequence of repeated similar statements. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] The code could be shortened by using a loop.
sprite_naming=[b]Problem:[/b] [newLine] The sprite %SPRITE uses the same name as another sprite, followed by a different number. This makes your program harder to understand. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Give your sprite a meaningful, unique name.
sprite_naming_default=[b]Problem:[/b] [newLine] The sprite %SPRITE does not have a meaningful name but uses the default name. This makes your program harder to understand. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Give your sprite a meaningful, unique name.
stuttering_movement=[b]Problem:[/b] [newLine] If you press a key for longer, you expect a constant event processing. Unfortunately there is a delay between the first and second round of processing, making the movement stutter. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can prevent this delay by using the block [sbi]<key (%KEY v) pressed?>[/sbi] from the sensing category in scratch. To do that you have to put the conditional [sbi]if <key (%KEY v) pressed?> then[/sbi] block inside of a [sbi]forever[/sbi] block and use the event handler [sbi]When green flag clicked[/sbi] instead of using the event handler [sbi]When [%KEY v] key pressed[/sbi].
terminated_loop=[b]Problem:[/b] [newLine] The loop is terminated before it actually repeats (e.g. by a stop-block).  [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
timer=Super! You use a variable as a sort of timer in your loop. You have a good understanding for loops and the utilization of them.
type_error=[b]Problem:[/b] [newLine] Some of the comparisons compare attributes of different types. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
type_error_weird_distance=[b]Problem:[/b] [newLine] You are using a block inside [sbi]distance to ( v)[/sbi] to which you can not measure distance. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use the mouse-pointer or sprite name options given to you by the [sbi]distance to ( v)[/sbi] block.
unnecessary_boolean_true=[b]Problem:[/b] [newLine] You are comparing a boolean sensing block with the value %VALUE. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You could just use the sensing block directly without comparison.
unnecessary_boolean_false=[b]Problem:[/b] [newLine] You are comparing a boolean sensing block with the value %VALUE. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You could just use the sensing block directly without comparison inside a [sbi]not < >[/sbi] block.
unnecessary_glide=[b]Problem:[/b] [newLine] You are using a [sbi]glide ( ) secs. to ( v))[/sbi] block. Since the time value is 0 this block is executed immediately. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can use a [sbi]go to ( v))[/sbi] block instead.
unnecessary_glide_xy=[b]Problem:[/b] [newLine] You are using a [sbi]glide ( ) secs. to x: ( ) y: ( ))[/sbi] block. Since the time value is 0 this block is executed immediately. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can use a [sbi]go to x: ( ) y: ( )[/sbi] block instead.
unnecessary_if=[b]Problem:[/b] [newLine] You are using two [sbi]if < > then[/sbi] blocks after another with the same combination of blocks inside. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can make that easier to read by using an [sbi]<< > or < >>[/sbi] block combining the conditions in a single [sbi]if < > then[/sbi] block.
unnecessary_if_after_until=[b]Problem:[/b] [newLine] You are using an [sbi]if < > then[/sbi] block after an [sbi]until < >[/sbi] block with the same condition. The blocks inside the [sbi]if < > then[/sbi] block are always executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can remove the [sbi]if < > then[/sbi] block.
unnecessary_if_after_until_else=[b]Problem:[/b] [newLine] You are using an [sbi]if < > then else[/sbi] block after an [sbi]until < >[/sbi] block with the same condition. The blocks inside the upper part of the [sbi]if < > then else[/sbi] block are always executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can remove the [sbi]if < > then else[/sbi] block.
unnecessary_message=[b]Problem:[/b] [newLine] You are using a [sbi]broadcast (%MESSAGE v)[/sbi] block immediately after the event handler block. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You could simply use the same event handler on the scripts starting with [sbi]when I receive [%MESSAGE v][/sbi].
unnecessary_move=[b]Problem:[/b] [newLine] You are using a move block that does not change the position of the sprite. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can remove the block.
unnecessary_procedure=[b]Problem:[/b] [newLine] TODO. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO.
unnecessary_rotation=[b]Problem:[/b] [newLine] You are using a turn that does not change the orientation of the sprite. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can just remove the turn block.
unnecessary_say=[b]Problem:[/b] [newLine] You are using a [sbi]say ( ) for ( ) seconds[/sbi] block. Since the time value is 0 this block has no effect. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can delete it.
unnecessary_size_change=[b]Problem:[/b] [newLine] You are using a block that does not change the size of the sprite. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can just remove the turn block.
unnecessary_stop_script=[b]Problem:[/b] [newLine] There is a [sbi]stop [this script v][/sbi] block at the end of a script. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can delete it.
unnecessary_think=[b]Problem:[/b] [newLine] You are using a [sbi]think ( ) for ( ) seconds[/sbi] block. Since the time value is 0 this block has no effect. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can delete it.
unnecessary_wait=[b]Problem:[/b] [newLine] You are using a [sbi]wait ( ) seconds[/sbi] block. Since the value is 0 this block has no effect. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can delete it.
unused_custom_block=[b]Problem:[/b] [newLine] You created a custom block but you never use it in your project. This makes the project cluttered. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Delete the custom block.
unused_parameter=[b]Problem:[/b] [newLine] You created a parameter but you never use it in your procedure. This makes the custom block harder to understand. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Delete the parameter.
unused_variables=[b]Problem:[/b] [newLine] You created a variable [var]%VARIABLE[/var] but you never use it in your project. This makes the project harder to understand. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Delete the variable [var]%VARIABLE[/var] or use the blocks [sbi]set [%VARIABLE v] to ( )[/sbi], [sbi]change [%VARIABLE v] by ( )[/sbi] in your project.
unused_variables_list=[b]Problem:[/b] [newLine] You created a list [var]%VARIABLE[/var] but you never use it in your project. This makes the project harder to understand. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Delete the list [var]%VARIABLE[/var] or use the blocks [sbi]add ( ) to [%VARIABLE v][/sbi], [sbi]add ( ) at ( ) of [%VARIABLE v][/sbi] in your project.
used_variables=Great! You know that a variable should be initialized before used.
used_variables_list=Great! You know that a list should be initialized before used.
useful_position_check=Great attention! In Scratch the values for x- and y- coordinates are very exact floating point values. An [EQ] check with these numbers can cause problems. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] To avoid that, you used [LEQ] or [GEQ] operators.
useless_blocks_sprite=[b]Problem:[/b] [newLine] You used a block that is not intended for sprites. It only shows effect when used inside the stage. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can remove it.
useless_blocks_stage=[b]Problem:[/b] [newLine] You used a block that is not intended for the stage. It only shows effect when used inside sprites. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can remove it.
useless_wait=You used a [sbi]wait () seconds[/sbi] without any following blocks in the same script. Therefore, the waiting has no effect. You either need to follow the wait with other blocks or you can delete it.
valid_termination=Super! You implemented a valid termination condition in your loop, that prevents the loop to run forever.
variable_as_literal=[b]Problem:[/b] [newLine] You are using the name of a variable as text. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Did you mean to use the variable block for [var]%VARIABLE[/var] instead?
variable_initialization_race=[b]Problem:[/b] [newLine] A variable is initialized in different scripts triggered by the same event. The result may change depending on the order in which the scripts are executed. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Try assigning the values in only one of the scripts.
waiting_check_stop=Super! You are waiting for a condition to stop your program.
#
# mBlock
#
ambient_light_in_bounds=Nice! You are measuring the ambient light in the range of the sensor.
ambient_light_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure the ambient light in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use a value between 0 and 100.
battery_level_in_bounds=Nice! You are measuring the battery level in the possible range.
battery_level_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure the battery level of the robot in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use a value between 0 and 100.
codey_upload_stop_timed=[b]Problem:[/b] [newLine] If the "stop all" script is executed while a time-limited block is running, it will no longer be switched off.  [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
codey_upload_stop_timed_possible=[b]Problem:[/b] [newLine] This code can be executed as an upload. If the "stop all" script is executed while a time-limited block is running, it will not be switched off. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
color_detection_in_bounds=Nice! You are comparing the color value in the range of the sensor.
color_detection_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure the color value in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use an integer between 0 and 255.
color_setting_in_bounds=Nice! You are setting the color in the possible range.
color_setting_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to set the color value in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use an integer between 0 and 255.
detect_repeat_in_loop=[b]Problem:[/b] [newLine] Inputs are requested in a fast loop, which does not contain any [sbi]wait until < >[/sbi] blocks. This leads to inputs being read multiple times and code being executed multiple times. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
gear_potentiometer_in_bounds=Nice! You are measuring the potentiometer value of the gear of the robot in the possible range.
gear_potentiometer_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure the potentiometer value of the gear of the robot in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use an integer between 0 and 100.
interrupted_loop_sensing_robot=[b]Problem:[/b] [newLine] The [sbi]%BLOCKNAME[/sbi] block interrupts the checking of the condition in the [sbi]%THENELSE[/sbi] block while being executed. It can happen that the condition occurs but your script doesn't react accordingly because it is busy doing the [sbi]%BLOCKNAME[/sbi] block. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Consider doing the condition checking in a separate (parallel) script.
led_off_script=Nice! You have a script for turning off all LEDs.
led_off_script_missing=[b]Problem:[/b] [newLine] The LEDs on your robot are still turned on after the program has stopped. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Add an LED Off block at the end of your program.
line_following_in_bounds=Nice! You are comparing the value of the line following sensor in the possible range.
line_following_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure a value that can not be detected with the line following sensor. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use an integer between 0 und 3.
loop_sensing_robot=Well done! To ensure that you do not miss an event you continuously check for it in a forever loop.
looped_statement_not_stopped=[b]Problem:[/b] [newLine] Resources, such as motors or lamps, are not stopped by their respective stop statement if the executing statement is in a loop. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] A stop all statement is needed here.
loudness_in_bounds=Nice! You are comparing the value of the loudness sensor in the possible range.
loudness_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure the loudness in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use a value between 0 and 100.
matrix_off_script=Nice! You have a script for turning off the LED matrix.
matrix_off_script_missing=[b]Problem:[/b] [newLine] Matrix can be switched on, but there is no script to switch it off again. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
missing_loop_robot_sensing=[b]Problem:[/b] [newLine] The highlighted event in the script is only checked once. The script is ending too fast. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Enclose the event with the block [sbi]forever[/sbi], to continuously check for the event.
motor_low_power=[b]Problem:[/b] [newLine] The motor power is too low. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] MBot motors need at least 50% power to run reliably.
motor_off_script=Nice! You have a script for turning off all motors.
motor_power_in_bounds=Nice! You are using engine power that fits for the robot.
motor_power_minus=[b]Problem:[/b] [newLine] You are using a negative engine power. The robot moves in the opposing direction. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] To make the program easier to understand you should use the block for this direction.
motor_power_out_of_bounds=[b]Problem:[/b] [newLine] You are using a value which the motor power cannot be set to. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Engine power is given as a percentage and can therefore only be between 0 and 100.
motor_stop_script_missing=[b]Problem:[/b] [newLine] The motor can be switched on, but there is no script to switch it off again. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
multiple_attribute_modifications_robot=[b]Problem:[/b] [newLine] There are multiple changes to the same variable or attribute in sequence. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] This could be replaced by a single statement.
multiple_attribute_modifications_custom_robot=[b]Problem:[/b] [newLine] There are multiple changes to %VARIABLE in sequence. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] This could be replaced by a single statement.
parallel_board_launch_script=[b]Problem:[/b] [newLine] MBots cannot run parallel scripts in upload mode. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
parallel_resource_use=[b]Problem:[/b] [newLine] Output resources, such as motors or lamps, can cause problems if they are controlled by two scripts in parallel. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
parallelisation_robot=Great! You start at least two scripts on the same event. Congratulations, you implemented the concept of parallelisation.
pitch_angle_in_bounds=Nice! You are comparing the value of the pitch angle sensor in the possible range.
pitch_angle_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure the pitch angle of the robot in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use an integer between -180 and 180.
rocky_light_off_script=Nice! You have a script for turning off the Rocky light.
rocky_light_off_script_missing=[b]Problem:[/b] [newLine] Codey light can be turned on, but it lacks a script that turns it off again. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
roll_angle_in_bounds=Nice! You are comparing the value of the roll angle sensor in the possible range.
roll_angle_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure the roll angle of the robot in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use an integer between -90 and 90.
sensor_value_equals=[b]Problem:[/b] [newLine] Sensors can rarely measure exact, reliable values. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Value ranges should be used for this purpose.
shaking_strength_in_bounds=Nice! You are comparing the value of the shaking strength sensor in the possible range.
shaking_strength_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure the shaking strength in a range that is not possible. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use an integer between 0 and 100.
timed_statement_in_live_loop=[b]Problem:[/b] [newLine] When a time-limited action is performed alone in a repeat loop, it stutters in live mode. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
timed_statement_in_possible_live_loop=[b]Problem:[/b] [newLine] This code can be executed in live mode. If a time-limited action is performed alone in a repeat loop, it will stutter in live mode. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] TODO
ultra_sonic_in_bounds=Nice! You are comparing the value of the ultra sonic sensor in the possible range.
ultra_sonic_out_of_bounds=[b]Problem:[/b] [newLine] You are trying to measure a distance that cannot be detected with the ultrasonic sensor. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] Use a value between 3cm and 400cm.
unnecessary_time_robot=[b]Problem:[/b] [newLine] You are using a block that takes some time. Since the time value is 0 this block has no effect. [newLine] [newLine] [b]Suggestion for code improvement:[/b] [newLine] You can delete it.
