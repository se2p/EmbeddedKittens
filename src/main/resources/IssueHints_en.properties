ambiguous_custom_block_signature=Names for custom blocks are non-unique. Two custom blocks with the same name can only be distinguished if they have a different number or order of parameters. Try to always make the names for custom blocks unique.
ambiguous_parameter_name_unused=Scratch allows multiple parameter with the same name in one custom block. However, it cannot distinguish between these parameters afterwards, causing problems in your program. Always use parameters with unique names.
ambiguous_parameter_name_used=Scratch allows multiple parameter with the same name in one custom block. However, it cannot distinguish between these parameters afterwards, causing problems in your program. Always use parameters with unique names.
backdrop_switch=Very nice! You use the backdrop change event to start different scipts. That allows you to perform different actions depending on the backdrop of the game.
blocking_if_else=You are using [sbi]stop [all v][/sbi] or [sbi]stop [this script v][/sbi] blocks in both the [IF] and [ELSE] branch of this block. So the script terminates anyway and the blocks after the [sbi]if < > then[/sbi] are never executed. Try using the stop command only in one branch or remove the blocks after the [sbi]if < > then[/sbi].
blocking_if_else_inside_loop=You are using [sbi]stop [all v][/sbi] or [sbi]stop [this script v][/sbi] blocks in both the [IF] and [ELSE] branch of this block. So the script terminates anyway and the loop outside the [sbi]if < > then[/sbi] is never correctly executed. Try using the stop command only in one branch or remove the loop.
boolean_expression=Good! You use boolean expressions in your program.
busy_waiting_all=In your script you are constantly checking a condition, just to stop everything once the condition is met. Use the [sbi]wait until < >[/sbi] block instead of the forever and if combination to end your script when the condition is met.
busy_waiting_clone=In your script you are constantly checking a condition, just to delete the clone once the condition is met. Use the [sbi]wait until < >[/sbi] block instead of the forever and if combination to end your script when the condition is met.
busy_waiting_script=In your script you are constantly checking a condition, just to stop the script once the condition is met. Use the [sbi]wait until < >[/sbi] block instead of the forever and if combination to end your script when the condition is met.
call_without_definition=If you used a custom block in your program and deleted it, there may still be pieces of code referring to this custom block. Make sure to delete all instances, where the deleted custom block was used.
clone_type_1=There are identical statements in multiple scripts. A custom block could simplify your code.
clone_type_2=There are similar statements in multiple scripts, differing only in parameters. A custom block could simplify your code.
clone_type_3=There is similar code in multiple scripts. A custom block could simplify your code.
collision=Well done! Your sprite shows a certain behavior (e.g. changes its looks or moves) when it collides with or touches something.
comparing_literals_default_false=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return [FALSE]. Consequently, your code inside the [bc]%THENELSE[/bc] slot is %ALWAYSNEVER executed. Change the comparison to something meaningful or replace the structure.
comparing_literals_default_true=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return [TRUE]. Consequently, your code inside the [bc]%THENELSE[/bc] slot is %ALWAYSNEVER executed. Therefore the block is obsolete.
comparing_literals_default_variable=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Consequently, your code inside the [bc]%THENELSE[/bc] slot is %ALWAYSNEVER executed. Did you rather intend to use a variable [var]%VARIABLE[/var]? If so, you should go to the variables toolbox and make a variable [var]%VARIABLE[/var] first. Then try to use the new [var]%VARIABLE[/var] block in your comparison.
comparing_literals_default_variable_exists=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Consequently, your code in side the [bc]%THENELSE[/bc] slot is %ALWAYSNEVER executed. Did you rather intend to use a block for your defined variable [var]%VARIABLE[/var]?
comparing_literals_default_variable_exists_two=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Consequently, your code inside the [bc]%THENELSE[/bc] slot is %ALWAYSNEVER executed. Did you rather intend to use a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both? If so, you have to go to the variables toolbox and use the [var]%VARIABLE1[/var] and/or [var]%VARIABLE2[/var] block in your comparison.
comparing_literals_default_variable_exists_two_without_information=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Did you rather intend to use a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both? If so, you have to go to the variables toolbox and use the [var]%VARIABLE1[/var] and/or [var]%VARIABLE2[/var] block in your comparison.
comparing_literals_default_variable_exists_without_information=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Did you rather intend to use a block for your defined variable [var]%VARIABLE[/var]?
comparing_literals_default_variable_two=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Consequently, your code inside the [bc]%THENELSE[/bc] slot is %ALWAYSNEVER executed. Did you rather intend to use a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both? If so, you have to go to the variables toolbox and make a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both first. Then try to use the new [var]%VARIABLE1[/var] and/or [var]%VARIABLE2[/var] block in your comparison.
comparing_literals_default_variable_two_without_information=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE. Did you rather intend to use a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both? If so, you have to go to the variables toolbox and make a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both first. Then try to use the new [var]%VARIABLE1[/var] and/or [var]%VARIABLE2[/var] block in your comparison.
comparing_literals_default_variable_without_information=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Did you rather intend to use a variable [var]%VARIABLE[/var]? If so, you should go to the variables toolbox and make a variable [var]%VARIABLE[/var] first. Then try to use the new [var]%VARIABLE[/var] block in your comparison.
comparing_literals_default_without_information=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Change the comparison to something meaningful or replace the structure.
comparing_literals_wait_false=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return [FALSE]. The blocks after the [sbi]wait until < >[/sbi] will be executed %ALWAYSNEVER. Change the comparison to something meaningful or replace the structure.
comparing_literals_wait_true=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return [TRUE]. The blocks after the [sbi]wait until < >[/sbi] will be executed %ALWAYSNEVER. Therefore the block is obsolete.
comparing_literals_wait_variable=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Consequently, the blocks after the Wait will be executed %ALWAYSNEVER. Did you rather intend to use a variable [var]%VARIABLE[/var]? If so, you should go to the variables toolbox and make a variable [var]%VARIABLE[/var] first. Then try to use the new [var]%VARIABLE[/var] block in your comparison.
comparing_literals_wait_variable_exists=You used [var]%VARIABLE[/var] just as a text. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Consequently, the code following the [sbi]wait until < >[/sbi] is %ALWAYSNEVER executed. Did you mean to use the block for your own variable [var]%VARIABLE[/var] in the comparison? You can find this block in the section variables.
comparing_literals_wait_variable_exists_two=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Consequently, your code after the [sbi]wait until < >[/sbi] block is %ALWAYSNEVER executed. Did you rather intend to use a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both? If so, you have to go to the variables toolbox and use the [var]%VARIABLE1[/var] and/or [var]%VARIABLE2[/var] block in your comparison.
comparing_literals_wait_variable_two=You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE%ADDINFODICT. Consequently, your code after the [sbi]wait until < >[/sbi] is %ALWAYSNEVER executed. Did you rather intend to use a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both? If so, you have to go to the variables toolbox and make a variable [var]%VARIABLE1[/var] or a variable [var]%VARIABLE2[/var] or both first. Then try to use the new [var]%VARIABLE1[/var] and/or [var]%VARIABLE2[/var] block in your comparison.
conditional_inside_loop=Very good! You continouosly check for conditions within a loop. You know how to combine important control blocks and that can help you solve more advanced problems.
controlled_broadcast_or_stop=Very good! To have more control over your program, you continouosly check for certain conditions before broadcasting or stopping the program/script.
coordination=Awesome! You can coordinate your scripts within the program very well! That is essential for larger programs.
correct_broadcast=Great job! You correctly implemented a broadcast, now you can easily coordinate all your scripts.
custom_block_usage=Very good! You know how to create your own block and also how to use it in you program.
custom_block_with_forever=If a custom block contains a forever loop and the custom block is used in the middle of [bc]another script[/bc], the script will never be able to finish. The forever loop in the custom block cannot be left, resulting in the calling script never being able to proceed.
custom_block_with_termination=The custom block [sbi]%METHOD[/sbi] contains a [sbi]stop [all v][/sbi] or [sbi]delete this clone[/sbi] and the custom block is called in the middle of [bc]another script[/bc], the script will never reach the blocks following the call of [sbi]%METHOD[/sbi]. Delete the [sbi]stop [all v][/sbi] or [sbi]delete this clone[/sbi] in the custom block [sbi]%METHOD[/sbi] or use an [sbi]if < > then[/sbi] block to not stop in every execution.
dead_code=Your project contains blocks lying around. That means, there are blocks which will never be executed. This makes the project cluttered. You can delete these blocks.
delete_clone_in_loop=Your code is deleting the clone in the first iteration of the loop. This makes the loop unnecessary and it just makes your program harder to read. You can remove the loop.
directed_motion=Super! Triggered by a keystroke your sprite can move directed. That is an important concept for most computer games.
double_if=Your project contains a duplicated if-condition. This makes the project cluttered. Consider shortening the program by merging the two if-statements in a single conditional statement.
duplicate_sprite=Your project contains multiple exact copies of the same sprite. This makes the project cluttered. Consider using cloning instead.
duplicated_script=Your project contains the identical script twice. You probably only need one of them, and could delete all copies.
duplicated_scripts_covering=Your project contains the identical script twice. The scripts overlap exactly so you may be not aware of this. You probably only need one of them, and could delete all copies.
empty_control_body=There is no code inside your [sbi]%BLOCKNAME[/sbi]. Consequently, nothing happens when it is invoked. This makes your code harder to understand. Consider deleting the block if you don't need it.
empty_custom_block=You created a custom block which contains no statements. When the custom block is invoked, nothing happens. Consider deleting the custom block if you don't need it.
empty_project=Your project is completely empty. Let's begin by adding the first sprite.
empty_script=You use an empty event block. When the event occurs, nothing will happen. Delete this block if nothing should happen. If not add blocks after this one.
empty_sprite=The sprite %SPRITE contains no blocks. It can not react to any user input or sprite interaction. If this is intended leave it as is. Otherwise you have to think what the sprite should do and introduce scripts to this sprite.
endless_recursion_broadcast=If a custom block calls itself inside its body and has no condition to stop the recursion, it will run for an indefinite amount of time.
endless_recursion_procedure=If a message is sent in the same script it was received and the script has no condition to stop the recursion, it will run for an indefinite amount of time.
expression_as_touching_or_color=This block expects a colour or a sprite as parameter and does not work correctly with a string or a number. You probably should remove the reporter block.
forever_inside_if=The loop [sbi]forever[/sbi] is never left. All blocks inside this script but outside of the forever loop, this includes the blocks following the [sbi]if < > then[/sbi], are never executed. Try omitting the inner loop.
forever_inside_loop=The inner loop [sbi]forever[/sbi] is never left. All blocks inside this script but outside of the forever loop are never executed again. Try omitting the inner loop.
gliding_motion=Super! Triggered by a keystroke your sprite can make a gliding motion. That is an important concept for most computer games.
hide_without_show=Your program uses a [sbi]hide[/sbi] block without making the sprite visible ever again. This leads to changes to the sprite not being visualised. To make these changes visible you have to use a [sbi]show[/sbi] block in your program.
illegal_parameter_refactor=The parameter has the wrong type. By editing the custom block the boolean parameter was made into a number or text parameter. To fix this undo the editing.
immediate_delete_clone_after_broadcast=The script deletes the clone immediately after the [sbi]broadcast (%MESSAGE v)[/sbi] block. The script that starts with [sbi]when I receive [%MESSAGE v][/sbi] for this message in this clone of the Sprite %SPRITE won't be executed right. It is better to use a [sbi]broadcast (%MESSAGE v) and wait[/sbi] block instead.
immediate_stop_after_say_think=The script stops everything immediately after the [bc]%SAYTHINK[/bc] block. The text is never shown. Replace the [bc]%SAYTHINK[/bc] block with a [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block. To make the rest of the program stop you can insert a [sbi]stop [other scripts in sprite v][/sbi] before the %SAYTHINK.
immediate_stop_after_say_think_multiple=The script stops everything immediately after the [bc]%SAYTHINK[/bc] block. The text is never shown. Replace the [bc]%SAYTHINK[/bc] block with a [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block. To make the rest of the program stop you can insert a [sbi]stop [other scripts in sprite v][/sbi] before the %SAYTHINK. If you want to stop everything while the sprite is executing the [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block, you have to inform other sprites using a [sbi]broadcast (message v)[/sbi] block, so that they can stop their scripts.
inappropriate_handler_delete_clone=The script contains a [sbi]delete this clone[/sbi] block. It can't be executed, because in the event handler it isn't clear which clone should be affected. The script has to start with a [sbi]when I start as a clone[/sbi] or [sbi]when this sprite clicked[/sbi] block. Another possibility would be moving the [sbi]delete this clone[/sbi] block to a script starting with one of these blocks.
initialisation_of_looks_sprite=Well done! You initialize the looks of your sprite with every new program start.
initialisation_of_looks_stage=Well done! You initialize the looks of your stage with every new program start.
initialisation_of_position=Great job! You initialize the location of your sprite with every new program start.
interrupted_loop_sensing=The [bc]%BLOCKNAME[/bc] block interrupts the checking of the condition in the [bc]%THENELSE[/bc] block while being executed. It can happen that the condition occurs but your script doesn't react accordingly because it is busy doing the [bc]%BLOCKNAME[/bc] block. Consider doing the condition checking in a separate (parallel) script.
key_set_position=Your program sets the position of the sprite everytime you press %KEY to a specific value. You probably wanted to move the sprite by a certain value. For this you have to use the block [sbi]change %XY by ( )[/sbi].
list_usage=Well done! You can use a list and therefore handle important concepts of collections in programming.
long_script=The script you created is very long. Please divide it into two or more smaller scripts: each smaller script should be responsible for one subtask to keep track of it.
loop_one=If you set the number of repetitions in a loop to 1 it is executed once. You could just as well just remove the loop block, and simply connect the blocks inside the loop directly into your script.
loop_sensing=Very good! To ensure that you don't miss an event you continuously check for it in a forever loop.
loop_zero=If you set the number of repetitions in a loop to 0 it is never executed. You could just as well just remove the loop block and the blocks inside it.
matching_parameter=You know that a parameter should to be initialized before used.
message_naming=The message [bc]%MESSAGE[/bc] doesn't have a meaningful name. You are using the default name or one that is already used followed by a number. This makes your program hard to understand. Use a meaningful, unique message.
message_never_received=The message [bc]%MESSAGE[/bc] that is being sent by this broadcast is never received by a [sbi]when I receive [message v] [/sbi] block. Therefore nothing will happen as a reaction to this message. When you send a message make sure that [bc]another script[/bc] receives it.
message_never_sent=message_never_sent= The message [bc]%MESSAGE[/bc], that is supposed to be received is never sent. Therefore the script will never be triggered. If you want to receive a message, you have to select a message that is being sent in a [bc]different script[/bc], or create a new message to send in a [bc]different script[/bc].
message_never_sent_say_think=The message %MESSAGE this block should receive is never sent. This script will never be triggered. You are using the message as text in a [sbi]%SAYTHINK ( )[/sbi] or [sbi]%SAYTHINK ( ) for ( ) seconds[/sbi] block in the sprite(s): %SPRITE. When a script waits for a message to receive, you have to take care, that you send it with a [sbi]broadcast (%MESSAGE v)[/sbi] block.
message_never_sent_touching=The message %MESSAGE this block should receive is never sent. This script will never be triggered. You are using a [sbi]touching (%SPRITE v)?[/sbi]' block in: %SPRITE. When a message about a touching event should be sent to all sprites you have to use an additional [sbi]broadcast (%MESSAGE v)[/sbi] block.
middle_man_broadcast=Using a broadcast receiver only to send a broadcast again is considered a code smell, as the script is a middle man between the original sender and the final receiver. Consider to change the message of the final receiver to the message sent of the first broadcast and then delete the middle man to save redundant code.
middle_man_procedure=Using a custom block only to call [bc]another custom block[/bc] is considered a code smell, as the first custom block is a middle man between the original caller and the final custom block. Consider to change the call of the first custom block to a call of the final custom block and then delete the middle man to save redundant code.
missing_ask=Your project uses the [sbi](answer)[/sbi] block, but the [sbi]ask ( ) and wait[/sbi] and wait block is never used in the project. The [sbi](answer)[/sbi] block can not return a meaningful value. Use the [sbi]ask ( ) and wait[/sbi] block before the first instance of [sbi]answer[/sbi].
missing_backdrop_switch=If the [sbi]When backdrop switches to [ v][/sbi] block is used to start a script and the backdrop never switches to the selected one, the script is never executed. Make sure to change the backdrop in your project.
missing_clone_call=If the [sbi]When I start as a clone[/sbi] block is used to start a script, but the sprite is never cloned, the event will never be triggered and the script will not be executed. Make sure to use a clone block for this sprite.
missing_clone_initialization=When a sprite is cloned but it has no scripts started by [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. Otherwise you could use the [sbi]stamp[/sbi] block in the pen extension if the clone should only be visible.
missing_clone_initialization_delete_clone=When you clone a sprite but it has no scripts started by [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi], the clone is unable to perform any actions. You are using a [sbi]delete this clone[/sbi] in a script of %SPRITE. Consider starting that script with a [sbi]When I start as a clone[/sbi] or a [sbi]When this sprite clicked[/sbi] block.
missing_clone_initialization_delete_clone_message=When a sprite is cloned but it has no scripts started by [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. You are using a [sbi]delete this clone[/sbi] block in a script of %SPRITE that starts with message [bc]%MESSAGE[/bc]. Search the sprite %SPRITE for the script sending the message [bc]%MESSAGE[/bc]. Consider starting that script with a [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] block instead of the [bc]%EVENTHANDLER[/bc] block.
missing_clone_initialization_delete_clone_message_multiple=When a sprite is cloned but it has no scripts started by [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. You are using a [sbi]delete this clone[/sbi] block in a script of %SPRITE that starts with message [bc]%MESSAGE[/bc]. Search the sprite %SPRITE for the scripts sending the message [bc]%MESSAGE[/bc]. Consider starting that scripts with a [sbi]When I start as a clone[/sbi] or [sbi]When this sprite clicked[/sbi] block instead of the [bc]%EVENTHANDLER[/bc] blocks.
missing_erase_all=If a sprite uses a pen down block but never an erase all block, then all drawings from a previous execution remain for the next run too. Maybe you should use an [sbi]erase all[/sbi] block after your hat block.
missing_initialization=In this sprite, %VARIABLE is not initialized before it is used the first time. It will use whatever value it contained at the end of the last run. Initialize the %VARIABLE by assigning the desired initial value at the beginning of a [bc]suitable script[/bc].
missing_initialization_clone=In this sprite, %VARIABLE is not initialized before it is used the first time. Initialize the %VARIABLE by assigning the desired initial value at the beginning of a [bc]suitable script[/bc].
missing_loop_mouse_position_direction=Your code attempts to turn the sprite to the mouse pointer, but only does this once. You might want to do this continuously for the entire duration while the project is running. For this you have to continuously execute the direction change and not just once. You have to wrap the direction block into a [sbi]forever[/sbi] block for this continuous change.
missing_loop_mouse_position_motion=Your code attempts to move the sprite towards the mouse position, but only does this once. You might want to do this continuously for the entire duration while the project is running. For this you have to continuously execute the movement and not just once. You have to wrap the motion block into a [sbi]forever[/sbi] block for this continuous movement.
missing_loop_sensing=The highlighted event in the script is only checked once. The script is ending too fast. Enclose the event with the block [sbi]forever[/sbi], to continuously check for the event.
missing_loop_sensing_variable=Your script should execute actions when the variable has a specific value. You have to check for this event continuously inside a [sbi]forever[/sbi] loop for not missing the event.
missing_pen_down=You use the [sbi]pen down[/sbi] block but you never lift the pen again, so your sprite will draw forever. Make sure to use a [sbi]pen up[/sbi] block in the sprite.
missing_pen_up=You use the [sbi]pen up[/sbi] block but your sprite has never set the pen down before. Make sure to use a [sbi]pen down[/sbi] block if you want to draw something.
missing_resource=Your program is missing the sound or picture you're trying to use. Select another sound ot image or add the one you intend to use.
missing_termination=The [sbi]repeat until < >[/sbi] blocks require a stopping condition. If the condition is missing, the result is an infinite loop. This will then prevent the execution of blocks following the loop in the script.
missing_wait_condition=The [sbi]wait until < >[/sbi] blocks require a condition. If the condition is missing, the block will wait forever and the following code is never executed.
mouse_follower=Very nice! Your sprite can follow the mouse. That can be a nice concept for lots of games.
movement_in_loop=Well done! The movements of your sprites are very fluent and natural because you implemented the moves in a loop.
multiple_attribute_modifications=There are multiple changes to the same variable or attribute in sequence, which could be replaced by a single statement.
multiple_attribute_modifications_custom=There are multiple changes to %VARIABLE in sequence, which could be replaced by a single statement.
multiple_attribute_modifications_saythink=There are multiple [sbi]say ( )[/sbi] or [sbi]think ( )[/sbi] blocks in a row without delay. You will only see the first message if you use a [sbi]say ( ) for ( ) seconds[/sbi] or [sbi]think ( ) for ( ) seconds[/sbi] block.
nested_conditional_checks=Very good! You use nested conditions, such as nested [sbi]if < > then[/sbi] blocks. That can help you solve more advanced problems.
nested_loops=If two or more loops are nested, there often occur some unpredictable problems.
nested_loops_perfume=Good! You used nested loops such as nested [sbi]forever[/sbi] and [sbi]repeat ( )[/sbi] blocks. That can help you solve more advanced problems.
no_working_scripts=Your sprite only has loose hat blocks and other blocks lying around. Make sure to connect the hat blocks to the other blocks so that the sprite can react to the events.
object_follower=Very nice! Your sprite can follow other objects. That can be a nice concept for lots of games.
orphaned_parameter=If you delete a created parameter again, be sure to remove it from all the locations, where you used it before.
parallelisation=Well done! You start at least two scripts on the same event. Congratulations, you implemented the concept of parallelisation.
parameter_out_of_scope=Make sure, that you use the parameters of a custom block only inside of this block.
position_equals_check=A sprite's position is usually defined by its center. It is unlikely that the %COORDINATE coordinate of an object has the exact value of the comparison. Instead try to use an approximation with [LEQ] or [GEQ].
position_equals_check_dist=A sprite's position is usually defined by its center. It is unlikely that the distance between two objects has the exact value of the comparison. Instead try to use an approximation with [LEQ] or [GEQ].
position_equals_check_zero_mouse=The distance between a sprite and the mouse-pointer is usually measured from center to center. It is unlikely that the center points of mouse-pointer and sprite will ever be exactly on top of each other. Instead remove the [EQ] block and try to use a suitable approximation with [LEQ] or use a touching-block [sbi]touching ( v)?[/sbi], [sbi]touching color [#11ff33]?[/sbi], [sbi]color [#11ff33] is touching [#11ff33]?[/sbi] from the sensing toolbox.
position_equals_check_zero_sprites=The distance between two sprites is usually measured from center to center. It is very unlikely that the centers of two sprites will ever be exactly on top of each other. Remove the [EQ] and instead use a suitable approximation with [LEQ] or use a touching-block [sbi]touching ( v)?[/sbi], [sbi]touching color [#11ff33]?[/sbi], [sbi]color [#11ff33] is touching [#11ff33]?[/sbi] from the sensing toolbox.
recursive_cloning=Scripts starting with [sbi]When I start as a clone[/sbi] should not create clones of itself. This could result in an infinite number of clones.
same_variable_different_sprite=The same variable name is used in multiple sprites. This can be confusing. Make sure, that you use unique names for your variables.
say_sound_synchronisation=Super! To make your sprite talk, you play a sound at the same time a speech bubble appears. That is a great feature for games.
sequential_actions=Your script contains a sequence of repeated similar statements, which could be shortened by using a loop.
sprite_naming=The sprite %SPRITE uses the same name as another sprite, followed by a different number. This makes your program harder to understand. Give your sprite a meaningful, unique name.
sprite_naming_default=The sprite %SPRITE doesn't have a meaningful name but uses the default name. This makes your program harder to understand. Give your sprite a meaningful, unique name.
stuttering_movement=If you press a key for longer, you expect a constant event processing. Unfortunately there is a delay between the first and second round of processing, making the movement stutter. You can prevent this delay by using the block [sbi]<key (%KEY v) pressed?>[/sbi] from the sensing category in scratch. To do that you have to put the conditional [sbi]if <key (%KEY v) pressed?> then[/sbi] block inside of a [sbi]forever[/sbi] block and use the event handler [sbi]When green flag clicked[/sbi] instead of using the event handler [sbi]When [%KEY v] key pressed[/sbi].
terminated_loop=The loop is terminated before it actually repeats (e.g. by a stop-block).
timer=Very good! You use a variable as a sort of timer in your loop. You have a good understanding for loops and the utilization of them.
type_error=Some of the comparisons compare attributes of different types.
type_error_weird_distance=You are using a block inside [sbi]distance to ( v)[/sbi] to which you can not measure distance. Use the mouse-pointer or sprite name options given to you by the [sbi]distance to ( v)[/sbi] block.
unnecessary_boolean_true=You are comparing a boolean sensing block with the value %VALUE. You could just use the sensing block directly without comparison.
unnecessary_boolean_false=You are comparing a boolean sensing block with the value %VALUE. You could just use the sensing block directly without comparison inside a [sbi]not < >[/sbi] block.
unnecessary_glide=You are using a [sbi]glide ( ) secs. to ( v))[/sbi] block. Since the time value is 0 this block is executed immediately. You can use a [sbi]go to ( v))[/sbi] block instead.
unnecessary_glide_xy=You are using a [sbi]glide ( ) secs. to x: ( ) y: ( ))[/sbi] block. Since the time value is 0 this block is executed immediately. You can use a [sbi]go to x: ( ) y: ( )[/sbi] block instead.
unnecessary_if=You are using two [sbi]if < > then[/sbi] blocks after another with the same combination of blocks inside. You can make that easier to read by using an [sbi]<< > or < >>[/sbi] block combining the conditions in a single [sbi]if < > then[/sbi] block.
unnecessary_if_after_until=You are using an [sbi]if < > then[/sbi] block after an [sbi]until < >[/sbi] block with the same condition. The blocks inside the [sbi]if < > then[/sbi] block are always executed. you can remove the [sbi]if < > then[/sbi] block.
unnecessary_if_after_until_else=You are using an [sbi]if < > then else[/sbi] block after an [sbi]until < >[/sbi] block with the same condition. The blocks inside the upper part of the [sbi]if < > then else[/sbi] block are always executed. you can remove the [sbi]if < > then else[/sbi] block.
unnecessary_message=You are using a [sbi]broadcast (%MESSAGE v)[/sbi] block immediately after the event handler block. You could simply use the same event handler on the scripts starting with [sbi]when I receive [%MESSAGE v][/sbi].
unnecessary_move=You are using a move block that does not change the position of the sprite. You can remove the block.
unnecessary_rotation=You are using a turn that does not change the orientation of the sprite. You can just remove the turn block.
unnecessary_say=You are using a [sbi]say ( ) for ( ) seconds[/sbi] block. Since the time value is 0 this block has no effect. You can delete it.
unnecessary_size_change=You are using a block that does not change the size of the sprite. You can just remove the turn block.
unnecessary_stop_script=There is a [sbi]stop [this script v][/sbi] block at the end of a script. You can delete it.
unnecessary_think=You are using a [sbi]think ( ) for ( ) seconds[/sbi] block. Since the time value is 0 this block has no effect. You can delete it.
unnecessary_wait=You are using a [sbi]wait ( ) seconds[/sbi] block. Since the value is 0 this block has no effect. You can delete it.
unused_custom_block=You created a custom block but you never use it in your project. This makes the project cluttered. Delete the custom block.
unused_parameter=You created a parameter but you never use it in your procedure. This makes the custom block harder to understand. Delete the parameter.
unused_variables=You created a variable [var]%VARIABLE[/var] but you never use it in your project. This makes the project harder to understand. Delete the variable [var]%VARIABLE[/var] or use the blocks [sbi]set [%VARIABLE v] to ( )[/sbi], [sbi]change [%VARIABLE v] by ( )[/sbi] in your project.
unused_variables_list=You created a list [var]%VARIABLE[/var] but you never use it in your project. This makes the project harder to understand. Delete the list [var]%VARIABLE[/var] or use the blocks [sbi]add ( ) to [%VARIABLE v][/sbi], [sbi]add ( ) at ( ) of [%VARIABLE v][/sbi] in your project.
useful_position_check=Well done! In Scratch the values for x- and y- coordinates are very exact floating point values. An [EQ] check with these numbers can cause problems. To avoid that, you used [LEQ] or [GEQ] operators.
useless_blocks_sprite=You used a block that is not intended for sprites. It only shows effect when used inside the stage. You can remove it.
useless_blocks_stage=You used a block that is not intended for the stage. It only shows effect when used inside sprites. You can remove it.
valid_termination=You implemented a valid termination condition in your loop, that prevents the loop to run forever.
variable_as_literal=You are using the name of a variable as text. Did you mean to use the variable block for [var]%VARIABLE[/var] instead?
variable_initialization_race=A variable is initialized in different scripts triggered by the same event. The result may change depending on the order in which the scripts are executed. Try assigning the values in only one of the scripts.
waiting_check_stop=Great! You are waiting for a condition to stop your program.
# mBlock
ambient_light_in_bounds=Very good! You are measuring the ambient light in the range of the sensor.
ambient_light_out_of_bounds=You are trying to measure the ambient light in a range that is not possible. Use a value between 0 and 100.
battery_level_in_bounds=Very good! You are measuring the battery level in the possible range.
battery_level_out_of_bounds=You are trying to measure the battery level of the robot in a range that is not possible. Use a value between 0 and 100.
codey_upload_stop_timed=If the "stop all" script is executed while a timed block is running, it will no longer be switched off.
codey_upload_stop_timed_possible=This code can be executed as an upload. If the "stop all" script is executed while a timed block is running, it will not be switched off.
color_detection_in_bounds=Very good! You are comparing the color value in the range of the sensor.
color_detection_out_of_bounds=You are trying to measure the color value in a range that is not possible. Use a whole number between 0 and 255.
color_setting_in_bounds=Very good! You are setting the color in the possible range.
color_setting_out_of_bounds=You are trying to set the color value in a range that is not possible. Use a whole number between 0 and 255.
detect_repeat_in_loop=Inputs are requested in a fast loop, which does not contain any wait statements. This leads to inputs being read multiple times and code being executed multiple times.
gear_potentiometer_in_bounds=Very nice! You are measuring the potentiometer value of the gear of the robot in the possible range.
gear_potentiometer_out_of_bounds=You are trying to measure the potentiometer value of the gear of the robot in a range that is not possible. Use a whole number between 0 and 100.
interrupted_loop_sensing_robot=The [bc]%BLOCKNAME[/bc] block interrupts the checking of the condition in the [bc]%THENELSE[/bc] block while being executed. It can happen that the condition occurs but your script doesn't react accordingly because it is busy doing the [bc]%BLOCKNAME[/bc] block. Consider doing the condition checking in a separate (parallel) script.
led_off_script=Great! You have a script for turning off all LEDs.
led_off_script_missing=The LEDs on your robot are still turned on after the program has stopped. Add an LED Off block at the end of your program.
line_following_in_bounds=Very nice! You are comparing the value of the line following sensor in the possible range.
line_following_out_of_bounds=You are trying to measure a value that can not be detected with the line following sensor. Use a whole number between 0 und 3.
loop_sensing_robot=Very good! To ensure that you don\uFFFDt miss an event you continuously check for it in a forever loop.
looped_statement_not_stopped=Resources, such as motors or lamps, are not stopped by their respective stop statement if the executing statement is in a loop. A stop all statement is needed here.
loudness_in_bounds=Very nice! You are comparing the value of the loudness sensor in the possible range.
loudness_out_of_bounds=You are trying to measure the loudness in a range that is not possible. Use a value between 0 and 100.
matrix_off_script=Great! You have a script for turning off the LED matrix.
matrix_off_script_missing=Matrix can be switched on, but there is no script to switch it off again.
missing_loop_robot_sensing=The highlighted event in the script is only checked once. The script is ending too fast. Enclose the event with the block [sbi]forever[/sbi], to continuously check for the event.
motor_low_power=MBot motors need at least 50% power to run reliably.
motor_off_script=Great! You have a script for turning off all motors.
motor_power_in_bounds=Very good! You are using engine power that fits for the robot.
motor_power_minus=You are using a negative engine power. The robot moves in the opposing direction. To make the program easier to understand you should use the block for this direction.
motor_power_out_of_bounds=Engine power is given as a percentage and can therefore only be between 0 and 100.
motor_stop_script_missing=The motor can be switched on, but there is no script to switch it off again.
multiple_attribute_modifications_robot=There are multiple changes to the same variable or attribute in sequence, which could be replaced by a single statement.
multiple_attribute_modifications_custom_robot=There are multiple changes to %VARIABLE in sequence, which could be replaced by a single statement.
parallel_board_launch_script=MBots cannot run parallel scripts in upload mode.
parallel_resource_use=Output resources, such as motors or lamps, can cause problems if they are controlled by two scripts in parallel.
parallelisation_robot=Well done! You start at least two scripts on the same event. Congratulations, you implemented the concept of parallelisation.
pitch_angle_in_bounds=Very nice! You are comparing the value of the pitch angle sensor in the possible range.
pitch_angle_out_of_bounds=You are trying to measure the pitch angle of the robot in a range that is not possible. Use a whole number between -180 and 180.
rocky_light_off_script=Great! You have a script for turning off the Rocky light.
rocky_light_off_script_missing=Codey light can be turned on, but it lacks a script that turns it off again.
roll_angle_in_bounds=Well done! You are comparing the value of the roll angle sensor in the possible range.
roll_angle_out_of_bounds=You are trying to measure the roll angle of the robot in a range that is not possible. Use a whole number between -90 and 90.
sensor_value_equals=Sensors can rarely measure exact, reliable values. Value ranges should be used for this purpose.
shaking_strength_in_bounds=Well done! You are comparing the value of the shaking strength sensor in the possible range.
shaking_strength_out_of_bounds=You are trying to measure the shaking strength in a range that is not possible. Use a whole number between 0 and 100.
timed_statement_in_live_loop=When a timed action is performed alone in a repeat loop, it stutters in live mode.
timed_statement_in_possible_live_loop=This code can be executed in live mode. If a timed action is performed alone in a repeat loop, it will stutter in live mode.
ultra_sonic_in_bounds=Well done! You are comparing the value of the ultra sonic sensor in the possible range.
ultra_sonic_out_of_bounds=You are trying to measure a distance that cannot be detected with the ultrasonic sensor. Use a value between 3cm and 400cm.
unnecessary_time_robot=You are using a block that takes some time. Since the time value is 0 this block has no effect. You can delete it.
