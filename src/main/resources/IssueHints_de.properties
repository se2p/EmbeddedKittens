ambiguous_custom_block_signature=[b]Problem:[/b] [newLine] Du hast mehrere eigene Blöcke mit demselben Namen erstellst. Das Programm kann daher nicht zwischen den einzelnen Blöcken unterscheiden. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende für eigene Blöcke immer eindeutige Namen.
ambiguous_parameter_name_unused=[b]Problem:[/b] [newLine] Du hast mehrere Eingabefelder von eigenen Blöcken gleich benannt. Das Programm kann daher nicht zwischen den einzelnen Eingabefeldern unterscheiden. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende für Eingabefelder immer eindeutige Namen.
ambiguous_parameter_name_used=[b]Problem:[/b] [newLine] Du hast mehrere Eingabefelder von eigenen Blöcken gleich benannt. Das Programm kann daher nicht zwischen den einzelnen Eingabefeldern unterscheiden. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende für Eingabefelder immer eindeutige Namen.
backdrop_switch=Gut gemacht! Du hast nutzt den Wechsel zu einem anderen Bühnenbild auch, um andere Skripte zu starten. Somit kannst du passende Aktionen je nach Bühne ausführen.
blocking_if_else=[b]Problem:[/b] [newLine] Du verwendest einen [sbi]stoppe [alles v][/sbi]- oder [sbi]stoppe [dieses Skript v][/sbi]-Baustein sowohl im [IF]- als auch im [ELSE]-Zweig des [sbi]falls < > dann[/sbi]-Bausteins. Das Skript terminiert also in jedem Fall. Die Blöcke nach dem [sbi]falls < > dann[/sbi]-Baustein werden nie ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende nur in einem Zweig einen [sbi]stoppe [ v][/sbi]-Baustein oder lösche alle Bausteine nach dem [sbi]falls < > dann[/sbi]-Baustein.
blocking_if_else_inside_loop=[b]Problem:[/b] [newLine] Du verwendest einen [sbi]stoppe [alles v][/sbi] oder [sbi]stoppe [dieses Skript v][/sbi]-Baustein sowohl im [IF]- als auch im [ELSE]-Zweig des [sbi]falls < > dann[/sbi]-Bausteins. Das Skript terminiert also in jedem Fall. Die Wiederholung außerhalb des [sbi]falls < > dann[/sbi]-Bausteins wird daher nicht richtig ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende nur in einem Zweig einen [sbi]stoppe [ v][/sbi]-Baustein oder entferne die Wiederholung.
boolean_expression=Super! Du verwendest Boolsche Ausdrücke in deinem Programm.
busy_waiting_all=[b]Problem:[/b] [newLine] In deinem Skript wird immer wieder eine Bedingung überprüft, nur um bei Bedingungseintritt alles zu beenden. Dafür gibt es in Scratch eine bessere Lösung. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende anstatt der Wiederholung und der bedingten Anweisung den [sbi]warte bis < >[/sbi]-Baustein, um auf den Eintritt der Bedingung zu warten.
busy_waiting_clone=[b]Problem:[/b] [newLine] In deinem Skript wird immer wieder eine Bedingung überprüft, nur um bei Bedingungseintritt den Klon zu löschen. Dafür gibt es in Scratch eine bessere Lösung. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende anstatt der Wiederholung und der bedingten Anweisung den [sbi]warte bis < >[/sbi]-Baustein, um auf den Eintritt der Bedingung zu warten.
busy_waiting_script=[b]Problem:[/b] [newLine] In deinem Skript wird immer wieder eine Bedingung überprüft, nur um bei Bedingungseintritt das Skript zu beenden. Dafür gibt es in Scratch eine bessere Lösung. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende anstatt der Wiederholung und der bedingten Anweisung den [sbi]warte bis < >[/sbi]-Baustein, um auf den Eintritt der Bedingung zu warten.
call_without_definition=[b]Problem:[/b] [newLine] Du verwendest einen eigenen Baustein, der in der Baustein-Übersicht aber nicht mehr existiert. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche den Baustein (TODO: welchen?) an allen Stellen im Code, an denen du ihn verwendest. Wenn du einen eigenen Baustein benötigst, erstelle zunächst einen neuen und füge diesen in deinen Code ein.
clone_type_1=[b]Problem:[/b] [newLine] In mehreren Skripten werden identische Anweisungen verwendet. Code-Duplizierung macht dein Programm fehleranfällig und unübersichtlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Definiere und verwende einen eigenen Baustein, um den Code zu vereinfachen.
clone_type_2=[b]Problem:[/b] [newLine] In mehreren Skripten werden die gleichen Anweisungen, nur mit unterschiedlichen Parametern, verwendet. Code-Duplizierung macht dein Programm fehleranfällig und unübersichtlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Definiere und verwende einen eigenen Baustein, um den Code zu vereinfachen.
clone_type_3=[b]Problem:[/b] [newLine] Ähnlicher Code existiert in mehreren Skripten. Definiere und verwende einen eigenen Baustein, um den Code zu vereinfachen.
collision=Gut gemacht! Deine Figur zeigt ein Verhalten, sobald es mit bestimmten Dingen in Berührung kommt.
comparing_literals_default_false=[b]Problem:[/b] [newLine] Du vergleichst zwei Texte und erhältst immer dasselbe Ergebnis: [FALSE]. Der Code im [sbi]%THENELSE[/sbi]-Baustein wird %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Ersetze deinen Vergleich durch etwas Passenderes oder entferne die Kontrollstruktur.
comparing_literals_default_true=[b]Problem:[/b] [newLine] Du vergleichst zwei Texte und erhältst immer dasselbe Ergebnis: [TRUE]. Der Code im [sbi]%THENELSE[/sbi]-Baustein wird %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche den Baustein.
comparing_literals_default_variable=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. Deshalb wird der Code im [sbi]%THENELSE[/sbi]-Baustein %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du eine Variable [var]%VARIABLE[/var] im Vergleich verwenden. Lege diese in der Kategorie "Variable" an und ziehe den neuen Baustein in das Feld.
comparing_literals_default_variable_exists=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. Deshalb wird der Code im [sbi]%THENELSE[/sbi]-Baustein %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die angelegte Variable [var]%VARIABLE[/var] im Vergleich verwenden. Ziehe den Baustein für diese Variable in das Feld.
comparing_literals_default_variable_exists_two=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. Deshalb wird der Code im [sbi]%THENELSE[/sbi]-Baustein %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die angelegte Variable [var]%VARIABLE1[/var] oder [var]%VARIABLE2[/var] im Vergleich verwenden. Ziehe den Baustein für die passende Variable in das Feld.
comparing_literals_default_variable_exists_two_without_information=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die angelegte Variable [var]%VARIABLE1[/var] oder [var]%VARIABLE2[/var] im Vergleich verwenden. Ziehe den Baustein für die passende Variable in das Feld.
comparing_literals_default_variable_exists_without_information=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du den Baustein für die angelegte Variable [var]%VARIABLE[/var] im Vergleich verwenden. Ziehe den Baustein für diese Variable in das Feld.
comparing_literals_default_variable_two=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. Deshalb wird der Code im [sbi]%THENELSE[/sbi]-Baustein %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die Variablen [var]%VARIABLE1[/var] oder [var]%VARIABLE2[/var] im Vergleich verwenden? Lege diese in der Kategorie "Variable" an und ziehe die neuen Bausteine in die Felder.
comparing_literals_default_variable_two_without_information=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die Variablen [var]%VARIABLE1[/var] bzw. [var]%VARIABLE2[/var] im Vergleich verwenden. Lege diese in der Kategorie "Variable" an und ziehe die neuen Bausteine in die Felder.
comparing_literals_default_variable_without_information=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du eine Variable [var]%VARIABLE[/var] im Vergleich verwenden. Lege diese in der Kategorie "Variable" an und ziehe den neuen Baustein in das Feld.
comparing_literals_default_without_information=[b]Problem:[/b] [newLine] Du vergleichst zwei Texte und erhältst immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Ersetze deinen Vergleich durch etwas Passenderes oder entferne die Kontrollstruktur.
comparing_literals_wait_false=[b]Problem:[/b] [newLine] Du vergleichst zwei Texte und erhältst immer dasselbe Ergebnis: [FALSE]. Der Code nach dem Warte-Baustein wird also %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Ersetze deinen Vergleich durch etwas Passenderes oder entferne die Kontrollstruktur.
comparing_literals_wait_true=[b]Problem:[/b] [newLine] Du vergleichst zwei Texte und erhältst immer dasselbe Ergebnis: [TRUE]. Der Code nach dem Warte-Baustein wird also %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche den Baustein.
comparing_literals_wait_variable=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. Der Code nach dem Warte-Baustein wird %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du eine Variable [var]%VARIABLE[/var] im Vergleich verwenden. Lege diese in der Kategorie "Variable" an und ziehe den neuen Baustein in das Feld.
comparing_literals_wait_variable_exists=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. Der Code nach dem Warte-Baustein wird also %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die angelegte Variable [var]%VARIABLE[/var] im Vergleich verwenden. Ziehe den Baustein für diese Variable in das Feld.
comparing_literals_wait_variable_exists_two=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. Der Code nach dem Warte-Baustein wird also %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die angelegte Variable [var]%VARIABLE1[/var] oder [var]%VARIABLE2[/var] im Vergleich verwenden. Ziehe den Baustein für die passende Variable in das Feld.
comparing_literals_wait_variable_two=[b]Problem:[/b] [newLine] Bei deinem Vergleich erhältst du immer dasselbe Ergebnis: %TRUEFALSE%ADDINFODICT. Der Code nach dem Warte-Baustein wird also %ALWAYSNEVER ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die Variablen [var]%VARIABLE1[/var] bzw. [var]%VARIABLE2[/var] im Vergleich verwenden. Lege diese in der Kategorie "Variable" an und ziehe die neuen Bausteine in die Felder.
conditional_inside_loop=Toll! Du fragst in einer Wiederholung bestimmte Bedingungen ab, du verschachtelst also zwei wichtige Steuerungsblöcke. Damit kannst du auch etwas anspruchsvollere Probleme lösen.
controlled_broadcast_or_stop=Gut gemacht! Um mehr Kontrolle über dein Programm zu haben, fragst du kontinuierlich, ob bestimmte Bedingungen erfüllt sind, bevor du eine Nachricht verwendest oder das Programm bzw. Skript stoppst.
coordination=Sehr gut! Du kannst dein Programm und mehrere Skripte bereits gut miteinander koordinieren, das ist für ein größeres Programm sehr wichtig. Am besten geht es mittels Nachrichten und [sbi]Warte bis < >[/sbi]-Bausteinen.
correct_broadcast=Toll gemacht! Du hast eine Kommunikation mit Nachrichten richtig umgesetzt, somit kannst du ganz einfach deine Skripte koordinieren.
custom_block_usage=Sehr gut! Du kannst einen eigenen Baustein erstellen und verwendest ihn auch in deinem Programm.
#TODO Formulierungen überarbeiten
custom_block_with_forever=[b]Problem:[/b] [newLine] Im eigenen Baustein [sbi]%METHOD[/sbi] verwendest du den [sbi]wiederhole fortlaufend[/sbi]-Baustein ohne Abbruchbedingung. Dein eigener Baustein wird nach dem Aufruf also nie wieder verlassen. Die Anweisungen, die nach dem Aufruf dieses Bausteins im Code vorkommen, können nie ausgeführt werden. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] TODO
custom_block_with_termination=[b]Problem:[/b] [newLine] Wenn du im eigenen Baustein [sbi]%METHOD[/sbi] alles stoppst oder den aktuellen Klon löschst, werden die Befehle, die nach dem Aufruf deines Bausteins [sbi]%METHOD[/sbi] in einem [bc]anderen Skript[/bc] im Programm stehen, nie ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Entferne den [sbi]stoppe [alles v][/sbi]- oder [sbi]lösche diesen Klon[/sbi]-Baustein oder verwende einen [sbi]falls < >, dann[/sbi]-Baustein, um nicht immer zu stoppen.
dead_code=[b]Problem:[/b] [newLine] In deinem Programm befinden sich Blöcke, die keinen Ereignisverarbeiter haben. Sie werden niemals ausgeführt. Dadurch wird dein Programm unübersichtlicher. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst die Blöcke löschen oder versuchen sie in dein Programm zu integrieren.
delete_clone_in_loop=[b]Problem:[/b] [newLine] Dein Programm löscht den Klon im ersten Durchgang der Wiederholung. Die Wiederholung ist also überflüssig und macht dein Programm nur unübersichtlicher. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst die Wiederholung entfernen.
directed_motion=Gut gemacht! Deine Figur lässt sich auf Tastendruck geführt bewegen, das ist sehr wichtig für die meisten Spiele.
double_if=[b]Problem:[/b] [newLine] Dein Programm enthält zwei aufeinanderfolgende bedingte Anweisungen mit derselben Bedingung. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Überlege, ob du diese zu einem Baustein zusammenfassen kannst, um das Programm kürzer und verständlicher zu machen.
duplicate_sprite=[b]Problem:[/b] [newLine] In deinem Programm befinden sich exakte Kopien derselben Figur. Das macht das Programm unübersichtlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Hier könnte man auch einfach Klone erzeugen.
duplicated_script=[b]Problem:[/b] [newLine] In deinem Programm befindet sich das gleiche Skript unnötigerweise doppelt. Das macht das Programm unübersichtlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst eines der Skripte löschen.
duplicated_scripts_covering=[b]Problem:[/b] [newLine] In deinem Programm befindet sich das gleiche Skript unnötigerweise doppelt. Außerdem liegen die Skripte genau so übereinander, dass du nur eines sehen kannst. Dies kann zu unerwartetem Verhalten in deinem Programm führen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst eines der Skripte löschen.
empty_control_body=[b]Problem:[/b] [newLine] Du hast einen [sbi]%BLOCKNAME[/sbi] verwendet, der keine Bausteine enthält. Dies macht den Code schwieriger zu verstehen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche den Baustein, falls er nicht weiter verwendet wird.
empty_custom_block=[b]Problem:[/b] [newLine] Du hast einen eigenen Baustein definiert, der keine Bausteine in seiner Definition enthält. Wenn er aufgerufen wird, passiert nichts. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche den eigenen Baustein, falls er nicht weiter verwendet wird.
empty_project=[b]Problem:[/b] [newLine] Das gesamte Projekt ist leer. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Fang am besten damit an, eine erste Figur hinzuzufügen.
empty_script=[b]Problem:[/b] [newLine] In deiner Figur befindet sich ein Ereignisverarbeiter der keine Bausteine angehängt hat. Wenn das Ereignis ausgelöst wird, geschieht nichts. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wenn nichts geschehen soll, kannst du diesen Baustein löschen. Wenn doch etwas passieren soll, baue dieses Skript entsprechend weiter.
empty_sprite=[b]Problem:[/b] [newLine] Die Figur %SPRITE besitzt keinerlei Skripte. Sie kann auf keine Benutzerinteraktion oder Interaktion mit anderen Figuren reagieren. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wenn das beabsichtigt ist, kannst du das einfach lassen. Wenn nicht solltest du überlegen, was die Figur machen soll und dafür Skripte in dieser Figur anlegen.
endless_recursion_broadcast=[b]Problem:[/b] [newLine] TODO [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Führe beim Selbstaufruf eine Bedingung zum Abbruch ein, denn sonst ruft sich das Skript über die Nachricht unendlich lange immer wieder selbst auf.
endless_recursion_procedure=[b]Problem:[/b] [newLine] TODO [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Führe beim Selbstaufruf eine Bedingung zum Abbruch ein, denn sonst ruft sich der eigene Baustein unendlich lange immer wieder selbst auf.
expression_as_touching_or_color=[b]Problem:[/b] [newLine] Der Baustein erwartet als Übergabewert eine Farbe. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du solltest den eingesetzten Baustein entfernen.
forever_inside_if=[b]Problem:[/b] [newLine] Die Endloswiederholung [sbi]wiederhole fortlaufend[/sbi] wird nie verlassen. Alle Blöcke, die in diesem Skript, aber außerhalb dieser Endloswiederholung sind, also auch alle Blöcke nach dem [sbi]falls < >, dann[/sbi], werden so nie ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Versuche die innere Endloswiederholung wegzulassen.
forever_inside_loop=[b]Problem:[/b] [newLine] Die innere Endloswiederholung [sbi]wiederhole fortlaufend[/sbi] wird nie verlassen. Alle Blöcke, die in diesem Skript, aber außerhalb dieser Endloswiederholung sind, werden so nie wieder ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Versuche die innere Endloswiederholung wegzulassen.
gliding_motion=Gut gemacht! Deine Figur lässt gleitet auf Tastendruck in eine bestimmte Richtung. Dieses Konzept ist für viele Spiele wichtig.
hide_without_show=[b]Problem:[/b] [newLine] Dein Programm benutzt einen [sbi]verstecke dich[/sbi]-Baustein ohne die Figur wieder sichtbar zu machen. Dadurch können keine Veränderungen an der Figur dargestellt werden. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Um diese Veränderungen anzeigen zu lassen, musst du einen [sbi]zeige dich[/sbi]-Baustein in deinem Programm verwenden.
illegal_parameter_refactor=[b]Problem:[/b] [newLine] Der verwendete Parameter besitzt den falschen Typ. Durch das Bearbeiten des eigenen Bausteins ist aus dem Parameter mit einem Wahrheitswert ein Parameter mit einem Text oder Nummer geworden. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Mache die Bearbeitung rückgängig.
immediate_delete_clone_after_broadcast=[b]Problem:[/b] [newLine] Das Skript löscht den Klon sofort nach dem [sbi]sende (%MESSAGE v) an alle[/sbi]-Baustein. Das Skript, das durch die Nachricht ausgelöst wird und mit dem Baustein [sbi]Wenn ich [%MESSAGE v] empfange[/sbi] beginnt, wird für diesen Klon der Figur %SPRITE nicht mehr richtig abgearbeitet. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du verwendest besser einen [sbi]sende (%MESSAGE v) an alle und warte[/sbi]-Baustein.
immediate_stop_after_say_think=[b]Problem:[/b] [newLine] Das Skript stoppt alles sofort nach dem [sbi]%SAYTHINK[/sbi]-Baustein. Der Text wird nie angezeigt. Ersetze den [sbi]%SAYTHINK[/sbi]-Baustein durch einen [sbi]%SAYTHINK ( ) für ( ) Sekunden[/sbi]-Baustein. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Damit der Rest des Programms stoppt, fügst du am besten einen [sbi]stoppe [andere Skripte der Figur v][/sbi]-Baustein vor dem %SAYTHINK ein.
immediate_stop_after_say_think_multiple=[b]Problem:[/b] [newLine] Das Skript stoppt alles sofort nach dem [sbi]%SAYTHINK[/sbi]-Baustein. Der Text wird nie angezeigt. Ersetze den [sbi]%SAYTHINK[/sbi]-Baustein durch einen [sbi]%SAYTHINK ( ) für ( ) Sekunden[/sbi]-Baustein. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Damit der Rest des Programms stoppt, fügst du am besten einen [sbi]stoppe [andere Skripte der Figur v][/sbi]-Baustein vor dem %SAYTHINK ein. Wenn du alles andere stoppen möchtest, während die Figur den [sbi]%SAYTHINK ( ) für ( ) Sekunden[/sbi]-Baustein ausführt, musst du außerdem andere Figuren mit Hilfe eines [sbi]sende (Nachricht v) an alle[/sbi]-Bausteins benachrichtigen, dass auch sie ihre Skripte stoppen sollen.
inappropriate_handler_delete_clone=[b]Problem:[/b] [newLine] Das Skript enthält einen [sbi]lösche diesen Klon[/sbi]-Baustein. Dieser kann aber nicht ausgeführt werden, weil im Ereignisverarbeiter nicht klar wird, für welche Klone er gelten soll. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Deswegen muss das Skript entweder mit dem [sbi]Wenn ich als Klon entstehe[/sbi]-Baustein oder dem [sbi]Wenn diese Figur angeklickt wird[/sbi]-Baustein beginnen oder du verschiebst den [sbi]Lösche diesen Klon[/sbi]-Baustein in ein anderes Skript, das mit diesen Ereignisverarbeitern beginnt.
initialisation_of_looks_sprite=Gut gemacht! Du sorgst dafür, dass das Aussehen deiner Figur bei jedem Programmstart auf den Anfangszustand zurückgesetzt wird.
initialisation_of_looks_stage=Gut gemacht! Du sorgst dafür, dass das Aussehen deiner Bühne bei jedem Programmstart auf den Anfangszustand zurückgesetzt wird.
initialisation_of_position=Gut gemacht! Du sorgst dafür, dass sich deine Figur bei jedem Programmstart am selben Ausgangspunkt befindet.
interrupted_loop_sensing=[b]Problem:[/b] [newLine] Der [sbi]%BLOCKNAME[/sbi]-Baustein verhindert während seiner Ausführung die Überprüfung der Bedingung im [sbi]%THENELSE[/sbi]-Baustein. Es kann also sein, dass die Bedingung eintritt, aber dein Skript nicht passend reagiert, da es zu diesem Zeitpunkt mit dem '%BLOCKNAME'-Baustein beschäftigt ist. Überlege, ob du die Prüfung parallel (in einem eigenen Skript) durchführen kannst.
key_set_position=[b]Problem:[/b] [newLine] Dein Programm setzt jedes Mal, wenn du auf die Taste %KEY drückst, die Position der Figur auf einen bestimmten Wert. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wahrscheinlich hast du versucht die Figur um einen bestimmten Wert zu bewegen. Benutze dafür den Baustein [sbi]ändere %XY um ( )[/sbi].
list_usage=Gut gemacht! Du benutzt eine Liste, somit kannst du bereits mit Kollektionen umgehen.
long_script=[b]Problem:[/b] [newLine] Dein Skript ist sehr lang. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Versuche, es in mehrere kürzere Skripte zu teilen: Teile dein langes Skript so auf, dass jedes kürzere Skript für eine Teilaufgabe deines Programms zuständig ist. Dadurch behältst du den Überblick.
loop_one=[b]Problem:[/b] [newLine] Deine Wiederholung wird nur ein einziges Mal durchlaufen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] In diesem Fall ist der Wiederholungsbaustein überflüssig, du kannst ihn entfernen und die Bausteine im Inneren direkt in dein Skript einfügen.
loop_sensing=Gut gemacht! Damit du auch ganz sicher kein Ereignis verpasst, fragst du kontinuierlich nach diesem Ereignis in einer endlosen Wiederholung.
loop_zero=[b]Problem:[/b] [newLine] Deine Wiederholung wird nie durchlaufen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] In diesem Fall ist der Wiederholungsbaustein überflüssig, du kannst ihn und die Bausteine im Inneren entfernen.
matching_parameter=Gut! Du weißt, dass du deinen Parameter initialisieren solltest bevor du ihn verwendest.
message_naming=[b]Problem:[/b] [newLine] Die Nachricht [bc]%MESSAGE[/bc] hat keinen aussagekräftigen Namen. Du verwendest den Standardnamen oder eine Nachricht, die bereits genutzt wird, gefolgt von einer Zahl. Dadurch wird dein Programm schwerer zu verstehen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende aussagekräftige, eindeutige Nachrichten.
message_never_received=[b]Problem:[/b] [newLine] Die Nachricht [bc]%MESSAGE[/bc], die hier gesendet wird, wird nie durch einen [sbi]Wenn ich [Nachricht v] empfange[/sbi]-Baustein empfangen. Deshalb passiert nichts in Reaktion auf diese Nachricht. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wenn du eine Nachricht sendest, stelle sicher, dass sie auch von einem [bc]passenden Skript[/bc] empfangen wird.
message_never_sent=[b]Problem:[/b] [newLine] Die Nachricht [bc]%MESSAGE[/bc], die hier empfangen werden soll, wird nie gesendet. Dieses Skript wird also nie ausgelöst. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wenn du eine Nachricht empfangen willst, musst du eine Nachricht auswählen, die in einem [bc]anderen Skript[/bc] bereits versendet wird oder eine neue passende Nachricht in einem [bc]anderen Skript[/bc] versenden.
message_never_sent_say_think=[b]Problem:[/b] [newLine] Die Nachricht [bc]%MESSAGE[/bc], die hier empfangen werden soll, wird nie gesendet. Dieses Skript wird also nie ausgelöst. Du verwendest die Nachricht aber als Text in einem [sbi]%SAYTHINK ( )[/sbi] oder [sbi]%SAYTHINK ( ) für ( ) Sekunden[/sbi]-Baustein in den Figuren: %SPRITES. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Überlege, ob du dort zusätzlich einen [sbi]sende [%MESSAGE v] an alle[/sbi]-Baustein verwenden willst, um alle zu informieren.
message_never_sent_touching=[b]Problem:[/b] [newLine] Die Nachricht [bc]%MESSAGE[/bc], die hier empfangen werden soll, wird nie gesendet. Dieses Skript wird also nie ausgelöst. Du verwendest einen [sbi]wird (%SPRITE v) berührt?[/sbi]-Baustein in den Figuren: %SPRITE. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wenn du eine Nachricht über diese Berührung an alle versenden willst, dann musst du dazu zusätzlich einen [sbi]sende [%MESSAGE v] an alle[/sbi]-Baustein verwenden.
middle_man_broadcast=[b]Problem:[/b] [newLine] Wenn man auf eine Nachricht wartet, nur um dann gleich eine andere loszuschicken, ist das ein Code Smell. Der Grund dafür ist, dass das Skript, das auf die erste Nachricht wartet, eigentlich unnötig ist, es ist nur Vermittler zwischen dem originalen Sender und dem finalen Empfänger. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Überlege, ob du die Nachricht, auf die das finale Skript wartet, nicht auf die erste gesendete Nachricht umstellen kannst - dann kannst du problemlos das Skript in der Mitte löschen, um unnötigen Code zu vermeiden.
middle_man_procedure=[b]Problem:[/b] [newLine] Wenn man einen eigenen Baustein aufruft, nur um dann gleich einen anderen eigenen Baustein aufzurufen, ist das ein Code Smell. Der Grund dafür ist, dass der eigene Baustein, der nur einen anderen aufruft, eigentlich unnötig ist, er ist nur Vermittler zwischen dem originalen Aufruf und dem finalen eigenen Baustein. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Überlege, ob du den ersten Aufruf nicht auf den zweiten eigenen Baustein umstellen kannst - dann kannst du problemlos den eigenen Baustein in der Mitte löschen, um unnötigen Code zu vermeiden.
missing_ask=[b]Problem:[/b] [newLine] Der [sbi](Antwort)[/sbi]-Baustein wird verwendet, aber es wird nie eine Frage gestellt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] TODO
missing_backdrop_switch=[b]Problem:[/b] [newLine] Wenn du auf einen Wechsel des Bühnenbilds reagieren willst, dieses Bühnenbild aber nie erscheint, wird das Skript nie ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Stelle sicher, dass du den Wechsel zum Bühnenbild auch anordnen.
missing_clone_call=[b]Problem:[/b] [newLine] Wenn du das Element [sbi]Wenn ich als Klon entstehe[/sbi] verwendest, aber die Figur nicht geklont wird, wird das Skript nie ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Stelle sicher, dass die Figur auch irgendwo geklont wird.
missing_clone_initialization=[b]Problem:[/b] [newLine] Wenn du eine Figur klonst, sie aber kein Skript mit [sbi]Wenn ich als Klon entstehe[/sbi] oder [sbi]Wenn diese Figur angeklickt wird[/sbi] enthält, kann der Klon nichts machen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende ein Skript, das mit einem dieser Bausteine beginnt. Du kannst auch den [sbi]hinterlasse Abdruck[/sbi]-Baustein der Malstift-Erweiterung benutzen, wenn der Klon nichts machen soll.
missing_clone_initialization_delete_clone=[b]Problem:[/b] [newLine] Wenn du eine Figur klonst, sie aber kein Skript mit [sbi]Wenn ich als Klon entstehe[/sbi] oder [sbi]Wenn diese Figur angeklickt wird[/sbi] enthält, kann der Klon nichts machen. Du verwendest einen [sbi]lösche diesen Klon[/sbi]-Baustein in einem Skript von %SPRITE. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Untersuche, ob du dieses Skript sinnvoller mit dem [sbi]Wenn ich als Klon entstehe[/sbi] oder den [sbi]Wenn diese Figur angeklickt wird[/sbi]-Baustein beginnst.
missing_clone_initialization_delete_clone_message=[b]Problem:[/b] [newLine] Wenn du eine Figur klonst, diese Figur aber kein Skript mit [sbi]Wenn ich als Klon entstehe[/sbi] oder [sbi]Wenn diese Figur angeklickt wird[/sbi] enthält, kann der Klon nichts machen. Du verwendest einen [sbi]lösche diesen Klon[/sbi]-Baustein in einem Skript der Figur %SPRITE, das mit dem Empfangen der Nachricht [bc]%MESSAGE[/bc] beginnt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Suche in der Figur %SPRITE nach dem Skript, in dem die Nachricht [bc]%MESSAGE[/bc] versendet wurde. Verwende in diesem Skript statt des vorhandenen Ereignisverarbeiters [sbi]%EVENTHANDLER[/sbi] den [sbi]Wenn ich als Klon entstehe[/sbi]-Baustein oder den [sbi]Wenn diese Figur angeklickt wird[/sbi]-Baustein.
missing_clone_initialization_delete_clone_message_multiple=[b]Problem:[/b] [newLine] Wenn du eine Figur klonst, diese Figur aber kein Skript mit [sbi]Wenn ich als Klon entstehe[/sbi] oder [sbi]Wenn diese Figur angeklickt wird[/sbi] enthält, kann der Klon nichts machen. Du verwendest einen [sbi]lösche diesen Klon[/sbi]-Baustein in einem Skript der Figur %SPRITE, das mit dem Empfangen der Nachricht [bc]%MESSAGE[/bc] beginnt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Suche in der Figur %SPRITE nach den Skripten, in denen die Nachricht [bc]%MESSAGE[/bc] versendet wurde. Verwende in diesen Skripten statt des vorhandenen Ereignisverarbeiter [sbi]%EVENTHANDLER[/sbi] den [sbi]Wenn ich als Klon entstehe[/sbi]-Baustein oder den [sbi]Wenn diese Figur angeklickt wird[/sbi]-Baustein.
missing_erase_all=[b]Problem:[/b] [newLine] Wenn du in Scratch zeichnest, aber nie löscht, bleibt die Zeichnung auch bei der nächsten Ausführung erhalten. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Stelle sicher, dass du zu Beginn des Programms die alten Zeichnungen mit einem [sbi]lösche alles[/sbi]-Baustein löschst.
missing_initialization=[b]Problem:[/b] [newLine] In dieser Figur wird %VARIABLE nicht initialisiert bevor der Wert ausgelesen wird, und hat damit beim Start immer den Wert der letzten Ausführung. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Initialisiere %VARIABLE, indem du zu Beginn eines [bc]passenden Skripts[/bc] den gewünschten Anfangswert zuweist.
missing_initialization_clone=[b]Problem:[/b] [newLine] In dieser Figur wird %VARIABLE nicht initialisiert bevor der Wert ausgelesen wird. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Initialisiere %VARIABLE, indem du zu Beginn eines [bc]passenden Skripts[/bc] den gewünschten Anfangswert zuweist.
missing_loop_mouse_position_direction=[b]Problem:[/b] [newLine] Wenn du eine Figur zur Maus drehen willst, willst du das wahrscheinlich über die ganze Dauer des Programms machen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Damit das klappt, musst du die Drehung immer wieder ausführen und nicht nur einmal. Dazu musst du den Dreh-Baustein noch mit einem [sbi]wiederhole fortlaufend[/sbi]-Baustein umschließen.
missing_loop_mouse_position_motion=[b]Problem:[/b] [newLine] Wenn du eine Figur mit der Maus steuern willst, willst du das wahrscheinlich über die ganze Dauer des Programms machen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Damit das klappt, musst du die Bewegung immer wieder ausführen und nicht nur einmal. Dazu musst du den Bewegungsbaustein noch mit einem [sbi]wiederhole fortlaufend[/sbi]-Baustein umschließen.
missing_loop_sensing=[b]Problem:[/b] [newLine] Die hervorgehobene Bedingung wird in dem Skript nur einmal überprüft. Das Skript läuft dadurch zu schnell durch. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Umschließe die bedingte Anweisung mit dem Baustein [sbi]wiederhole fortlaufend[/sbi], um etwas wiederholt zu überprüfen.
missing_loop_sensing_variable=[b]Problem:[/b] [newLine] Wenn etwas beim Eintritt eines bestimmten Variablenwertes passieren soll, benötigst du eine Wiederholung, damit die Überprüfung kontinuierlich stattfindet. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Nutze einen Wiederholungsbaustein.
missing_pen_down=[b]Problem:[/b] [newLine] Du hast einen [sbi]schalte Stift aus[/sbi]-Baustein verwendet, aber keinen [sbi]schalte Stift ein[/sbi]. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wenn du in Scratch etwas zeichnen willst, vergiss nicht, den [sbi]Schalte Stift ein[/sbi]-Baustein zu verwenden.
missing_pen_up=[b]Problem:[/b] [newLine] Du hast einen [sbi]schalte Stift ein[/sbi]-Baustein verwendet, aber keinen [sbi]schalte Stift aus[/sbi]. Das kann zu ungewollten Linien in der Zeichnung führen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wenn du den Malstift irgendwo einschaltest, stelle sicher, dass er auch wieder ausgeschaltet wird.
missing_resource=[b]Problem:[/b] [newLine] Deinem Programm fehlt ein Bild oder ein Ton, den du benutzen willst. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wähle ein anderes Bild oder einen anderen Ton. Alternativ kannst du auch einen neuen Ton oder ein neues Bild hochladen.
missing_termination=[b]Problem:[/b] [newLine] Wird eine Wiederholung verwendet und die Abbruchbedingung vergessen, so führt das Programm die Wiederholung unendlich lang aus. Blöcke danach werden nie erreicht. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vergiss nicht, die Abbruchbedingung in deiner Wiederholung einzufügen.
missing_wait_condition=[b]Problem:[/b] [newLine] In deinem [sbi]Warte bis < >[/sbi]-Baustein fehlt die Bedingung, auf die gewartet werden soll. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] TODO
# bereits überarbeitet
mouse_follower=Super! Deine Figur kann dem Mauszeiger folgen. Das kann für einige Spiele ein gutes Konzept sein.
movement_in_loop=Gut gemacht! Die Bewegungen deiner Figur wirken sehr flüssig, da du die Bewegung in einer Wiederholung ausführst.
multiple_attribute_modifications=[b]Problem:[/b] [newLine] Es gibt mehrere Änderungen der gleichen Variable oder des gleichen Attributs direkt hintereinander. Bei Programmausführung hat nur die letzte Änderung merkbare Auswirkungen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Fasse die Änderungen zu einer einzigen Änderung zusammen.
multiple_attribute_modifications_custom=[b]Problem:[/b] [newLine] Es gibt mehrere Änderungen von %VARIABLE direkt hintereinander. Bei Programmausführung hat nur die letzte Änderung merkbare Auswirkungen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Fasse die Änderungen zu einer einzigen Änderung zusammen.
multiple_attribute_modifications_saythink=[b]Problem:[/b] [newLine] Es gibt mehrere [sbi]sage ( )[/sbi]- oder [sbi]denke ( )[/sbi]-Bausteine direkt hintereinander. Bei Programmausführung hat nur der letzte Baustein merkbare Auswirkungen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende [sbi]sage ( ) für ( ) Sekunden[/sbi]- oder [sbi]denke ( ) für ( ) Sekunden[/sbi]-Bausteine.
nested_conditional_checks=Sehr gut! Du benutzt verschachtelte Bedingungen, also ineinander verschachtelte [sbi]falls < >, dann[/sbi]. Damit kannst du auch etwas anspruchsvollere Probleme lösen.
#TODO Formulierungen überarbeiten
nested_loops=[b]Problem:[/b] [newLine] Verschachtle keine Wiederholungen ineinander, denn das kann zu unerwarteten Problemen führen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Versuche nicht notwendige Wiederholungen wegzulassen.
nested_loops_perfume=Sehr gut! Du benutzt ineinander verschachtelte Wiederholungen. Damit kannst du auch etwas anspruchsvollere Probleme lösen.
no_working_scripts=[b]Problem:[/b] [newLine] Deine Figur enthält nur lose Blöcke und Ereignisbausteine. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verbinde den Ereignisbaustein mit deinem restlichen Blöcken damit die Figur auf die Ereignisse reagieren kann.
object_follower=Super! Deine Figur kann anderen Objekten folgen. Das kann für einige Spiele ein gutes Konzept sein.
orphaned_parameter=[b]Problem:[/b] [newLine] TODO [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Wenn du bei deinem eigenen Baustein ein Eingabefeld nachträglich löschst, stelle sicher, dass du alle Verwendungen des Eingabefeldes auch löschst.
parallelisation=Toll! Du startest mindestens zwei Skripte durch das selbe Ereignis. Das Konzept von Parallelisierung kannst du somit bereits gut umsetzen.
parameter_out_of_scope=[b]Problem:[/b] [newLine] Den Wert eines Eingabefelds kannst du lediglich innerhalb eines eigenen Bausteins verwenden. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] TODO
position_equals_check=[b]Problem:[/b] [newLine] Die Position einer Figur in Scratch beschreibt ihren Mittelpunkt. Es ist sehr unwahrscheinlich, dass die %COORDINATE Koordinate eines Objekts den genauen Wert des Vergleichs annimmt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Benutze stattdessen eine passende Näherung mit [LEQ] bzw. [GEQ].
position_equals_check_dist=[b]Problem:[/b] [newLine] Die Position einer Figur in Scratch beschreibt ihren Mittelpunkt. Es ist sehr unwahrscheinlich, dass die Entfernung zweier Objekte den genauen Wert des Vergleichs annimmt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Benutze stattdessen eine passende Näherung mit [LEQ] bzw. [GEQ].
position_equals_check_zero_mouse=[b]Problem:[/b] [newLine] Die Entfernung einer Figur zum Mauszeiger in Scratch von Mittelpunkt zu Mittelpunkt gemessen. Es ist sehr unwahrscheinlich, dass die Mittelpunkte beider Objekte jemals exakt übereinander liegen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Entferne das [EQ] und benutze stattdessen eine passende Näherung mit [LEQ] oder verwende einen berühren-Baustein [sbi]wird ( v) berührt?[/sbi], [sbi]wird Farbe [#11ff33] berührt?[/sbi], [sbi]Farbe [#11ff33] berührt [#11ff33]?[/sbi] aus dem Bereich Fühlen.
position_equals_check_zero_sprites=[b]Problem:[/b] [newLine] Die Entfernung zweier Figuren wird in Scratch von Mittelpunkt zu Mittelpunkt gemessen. Es ist sehr unwahrscheinlich, dass die Mittelpunkte zweier Figuren jemals exakt übereinander liegen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Entferne das [EQ] und benutze stattdessen eine passende Näherung mit [LEQ] oder verwende einen berühren-Baustein [sbi]wird ( v) berührt?[/sbi], [sbi]wird Farbe [#11ff33] berührt?[/sbi], [sbi]Farbe [#11ff33] berührt [#11ff33]?[/sbi] aus dem Bereich Fühlen.
recursive_cloning=[b]Problem:[/b] [newLine] Ein Klon sollte keine weiteren Klone von sich selbst erzeugen, da sonst im schlimmsten Fall unendlich viele Klone entstehen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] TODO
same_variable_different_sprite=[b]Problem:[/b] [newLine] Der gleiche Variablenname wird in mehreren Figuren verwendet. Das kann Verwirrung erzeugen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Stelle sicher eindeutige Namen zu verwenden.
say_sound_synchronisation=Toll gemacht! Um deine Figur sprechen zu lassen, spielst du einen Klang genau zur gleichen Zeit ab, in der deine Figur auch in einer Sprechblase redet. Das ist ein tolles Feature.
sequential_actions=[b]Problem:[/b] [newLine] Das Programm enthält wiederholt eine Sequenz gleicher Anweisungen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Man könnte das Programm mit einer Wiederholung vereinfachen.
sprite_naming=[b]Problem:[/b] [newLine] Die Figur %SPRITE hat keinen aussagekräftigen Namen, sondern den Namen einer anderen Figur gefolgt von einer Zahl. Dadurch wird dein Programm schwerer zu verstehen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Gib deinen Figuren aussagekräftige, eindeutige Namen.
sprite_naming_default=[b]Problem:[/b] [newLine] Die Figur %SPRITE hat keinen aussagekräftigen Namen, sondern den Standardnamen. Dadurch wird dein Programm schwerer zu verstehen. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Gib deinen Figuren aussagekräftige, eindeutige Namen.
stuttering_movement=[b]Problem:[/b] [newLine] Drückt man eine Taste länger, dann erwartet man eine andauernde Ereignisverarbeitung. Leider tritt jedoch eine Verzögerung zwischen der ersten und der zweiten Verarbeitung auf, wodurch die Bewegung nicht flüssig ist. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst diese Verzögerung umgehen, indem du mit dem Baustein [sbi]<Taste (%KEY v) gedrückt?>[/sbi] aus der Kategorie Fühlen arbeitest. Dazu musst du die Bedingung [sbi]falls <Taste (%KEY v) gedrückt?>, dann[/sbi] innerhalb des Bausteins [sbi]wiederhole fortlaufend[/sbi] überprüfen und statt des Ereignisverarbeiters [sbi]Wenn Taste [ v] gedrückt wird[/sbi] den Ereignisverarbeiter [sbi]Wenn die grüne Flagge angeklickt[/sbi] verwenden.
terminated_loop=[b]Problem:[/b] [newLine] Die Wiederholung wird unterbrochen (z. B. durch einen Stop-Baustein) und wird gar nicht wiederholt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] TODO
timer=Super! Du benutzt eine eigene Variable als eine Art Zähler in deiner Wiederholung. Du hast Wiederholungen und den Umgang mit ihnen schon sehr gut verstanden.
type_error=[b]Problem:[/b] [newLine] Du vergleichst Werte, die nicht vergleichbar sind. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] TODO
type_error_weird_distance=[b]Problem:[/b] [newLine] Du benutzt einen Baustein in [sbi](Entfernung von ( v))[/sbi], zu dem du keine Entfernung messen kannst. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Verwende einen Figurnamen oder die Mauszeiger Option aus den vorgegebenen Möglichkeiten des [sbi](Entfernung von ( v))[/sbi]-Bausteins.
unnecessary_boolean_true=[b]Problem:[/b] [newLine] Du vergleichst einen Wahrheitsblock mit dem Wert %VALUE. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du könntest den Wahrheitsblock auch ohne Vergleich verwenden.
unnecessary_boolean_false=[b]Problem:[/b] [newLine] Du vergleichst einen Wahrheitsblock mit dem Wert %VALUE. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du könntest den Wahrheitsblock auch ohne Vergleich in ein [sbi]not < >[/sbi] einsetzen.
unnecessary_glide=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]gleite in ( ) Sek. zu ( v)[/sbi]-Baustein. Da der Zeitwert 0 ist, wird die Bewegung sofort ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst stattdessen einen [sbi]gehe zu ( v)[/sbi]-Baustein verwenden.
unnecessary_glide_xy=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]gleite in ( ) Sek. zu x: ( ) y: ( )[/sbi]-Baustein. Da der Zeitwert 0 ist, wird die Bewegung sofort ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst stattdessen einen [sbi]gehe zu x: ( ) y: ( )[/sbi]-Baustein verwenden.
unnecessary_if=[b]Problem:[/b] [newLine] Du benutzt zwei [sbi]falls < >, dann[/sbi]-Bausteine nacheinander mit den selben Blöcken im Inneren. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst das vereinfachen, indem du einen [sbi]<< > oder < >>[/sbi]-Baustein verwendest und die Bedingungen in einem einzelnen [sbi]falls < >, dann[/sbi]-Baustein zusammenfasst.
unnecessary_if_after_until=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]falls < >, dann[/sbi]-Baustein nach einem [sbi]wiederhole bis < >[/sbi]-Baustein mit der selben Bedingung. Die Bausteine im Inneren des [sbi]falls < >, dann[/sbi]-Bausteins werden immer ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst den [sbi]falls < >, dann[/sbi]-Baustein löschen.
unnecessary_if_after_until_else=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]falls < >, dann sonst[/sbi]-Baustein nach einem [sbi]wiederhole bis < >[/sbi]-Baustein mit der selben Bedingung. Die Bausteine in der oberen Hälfte des [sbi]falls < >, dann[/sbi]-Bausteins werden immer ausgeführt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst den [sbi]falls < >, dann[/sbi]-Baustein löschen.
unnecessary_message=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]sende (%MESSAGE v) an alle[/sbi]-Baustein sofort nach einem Ereignisverarbeiter. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst stattdessen einfach die Skripte, die mit [sbi]Wenn ich [%MESSAGE v] empfange[/sbi] beginnen, mit dem gleichen Ereignisverarbeiter starten.
unnecessary_move=[b]Problem:[/b] [newLine] Du benutzt einen Bewegungsbaustein, der die Position nicht verändert. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst ihn weglassen.
unnecessary_rotation=[b]Problem:[/b] [newLine] Deine Drehung bewirkt keinen Unterschied in der Ausrichtung deiner Figur. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst den Baustein weglassen.
unnecessary_say=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]sage ( ) für ( ) Sekunden[/sbi]-Baustein. Da der Zeitwert 0 ist, hat der Baustein keinen Effekt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst ihn löschen.
unnecessary_size_change=[b]Problem:[/b] [newLine] Dein Baustein bewirkt keinen Unterschied auf die Größe deiner Figur. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst den Baustein weglassen.
unnecessary_stop_script=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]stop [this script v][/sbi]-Baustein am Ende eines Skripts. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst ihn löschen.
unnecessary_think=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]denke ( ) für ( ) Sekunden[/sbi]-Baustein. Da der Zeitwert 0 ist, hat der Baustein keinen Effekt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst ihn löschen.
unnecessary_wait=[b]Problem:[/b] [newLine] Du benutzt einen [sbi]warte ( ) Sekunden[/sbi]-Baustein. Da der Wert 0 ist, hat der Baustein keinen Effekt. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Du kannst ihn löschen.
# bereits überarbeitet
unused_custom_block=[b]Problem:[/b] [newLine] Du hast einen eigenen Baustein erstellt, den du nirgends verwendest. Das macht das Programm unübersichtlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche deinen eigenen Baustein, wenn du ihn nicht brauchst.
unused_parameter=[b]Problem:[/b] [newLine] Du hast für den eigenen Baustein einen Parameter angelegt, den du im eigenenBaustein aber nicht verwendest. Das macht den eignen Baustein unübersichtlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche den Parameter, wenn du ihn nicht brauchst.
unused_variables=[b]Problem:[/b] [newLine] Du hast eine Variable [var]%VARIABLE[/var] definiert, die du an keiner Stelle deines Projekts verwendest. Das macht das Projekt unübersichtlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche die Variable [var]%VARIABLE[/var] oder nutze die Bausteine [sbi]setze [%VARIABLE v] auf ( )[/sbi] bzw. [sbi]ändere [%VARIABLE v] um ( )[/sbi] in deinem Projekt.
unused_variables_list=[b]Problem:[/b] [newLine] Du hast eine Liste [var]%VARIABLE[/var] definiert, die du an keiner Stelle deines Projekts verwendest. Das macht das Projekt unübersichtlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Lösche die Liste [var]%VARIABLE[/var] oder nutze die Bausteine [sbi]füge ( ) zu [%VARIABLE v] hinzu[/sbi] bzw. [sbi]füge ( ) bei ( ) in [%VARIABLE v] ein[/sbi] in deinem Projekt.
useful_position_check=Gut aufgepasst! In Scratch sind die Werte für die X- und Y-Koordinaten sehr genau und mit vielen Nachkommastellen. Einen genauen [EQ] -Abgleich mit solchen Zahlen zu machen, ist problematisch. Hier hast du alles richtig gemacht und nur mit [LEQ] bzw. [GEQ] -Operatoren gearbeitet.
useless_blocks_sprite=[b]Problem:[/b] [newLine] Du hast einen Baustein verwendet, der nicht für Figuren gedacht ist. Der Baustein zeigt nur bei Verwendung in der Bühne Wirkung. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Entferne den Baustein.
useless_blocks_stage=[b]Problem:[/b] [newLine] Du hast einen Baustein verwendet, der nicht für die Bühne gedacht ist. Der Baustein zeigt nur bei Verwendung in Figuren Wirkung. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Entferne den Baustein.
valid_termination=Du hast eine Abbruchbedingung in deine Wiederholung eingebaut, somit läuft die Wiederholung auch nicht unendlich lange.
variable_as_literal=[b]Problem:[/b] [newLine] Du hast den Namen einer Variable als Text verwendet. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Vermutlich wolltest du die Variable [var]%VARIABLE[/var] verwenden. Ziehe den Baustein dieser Variable in das Feld.
variable_initialization_race=[b]Problem:[/b] [newLine] Derselben Variable wird an verschiedenen Stellen ein Wert zugewiesen und zwar jeweils als Reaktion auf dasselbe Ereignis. Je nachdem, welches Skript schneller bzw. langsamer ausgeführt wird, verhält sich das Programm unterschiedlich. [newLine] [newLine] [b]Verbesserungsidee:[/b] [newLine] Weise der Variable nur an einer Stelle einen Wert zu oder verwende unterschiedliche Ereignisse.
waiting_check_stop=Super! Du wartest auf das Eintreten einer Bedingung zur Beendigung deines Programms.
#
# mBlock
#
# TODO ab hier: Struktur anpassen und Formulierungen überarbeiten
ambient_light_in_bounds=Toll! Du misst das Umgebungslicht in einem Bereich der vom Sensor erfasst werden kann.
ambient_light_out_of_bounds=Du versuchst das Umgebungslicht in einem Bereich zu messen, der au\u00DFerhalb des Messbereichs liegt. Verwende einen Lichtwert zwischen 0 und 100.
battery_level_in_bounds=Toll! Du misst die Batterieladung in einem Bereich der erfasst werden kann.
battery_level_out_of_bounds=Du versuchst die Batterieladung des Roboters in einem Bereich zu messen, der au\u00DFerhalb des Messbereichs liegt. Verwende einen Ladungswert zwischen 0 und 100.
codey_upload_stop_timed=Wenn der [sbi]stoppe [alles v][/sbi]-Baustein ausgef\u00FChrt wird, w\u00E4hrend ein zeitlich begrenzter Baustein l\u00E4uft, wird dieser nicht mehr abgeschalten.
codey_upload_stop_timed_possible=Dieser Code kann als upload ausgef\u00FChrt werden. Wenn dabei der [sbi]stoppe [alles v][/sbi]-Baustein ausgef\u00FChrt wird, w\u00E4hrend ein zeitlich begrenzter Baustein l\u00E4uft, wird dieser nicht mehr abgeschalten.
color_detection_in_bounds=Toll! Du vergleichst den Farbwert in einem Bereich der vom Sensor erfasst werden kann.
color_detection_out_of_bounds=Du versuchst einen Farbwert zu messen, der au\u00DFerhalb des Messbereichs liegt. Verwende eine ganze Zahl zwischen 0 und 255.
color_setting_in_bounds=Toll! Du setzt die Farbe in einem Bereich der dargestellt werden kann.
color_setting_out_of_bounds=Du versuchst einen Farbwert zu setzen, der au\u00DFerhalb des möglichen Bereichs liegt. Verwende eine ganze Zahl zwischen 0 und 255.
detect_repeat_in_loop=Inputs werden in einem schnellen Loop abgefragt, welcher keine wait Statements enth\u00E4lt. Dies f\u00FChrt dazu, dass Inputs mehrfach ausgelesen werden und Code mehrfach ausgef\u00FChrt wird.
gear_potentiometer_in_bounds=Gro\u00DFartig! Du misst den Potentiometerwert des Getriebes in einem Bereich der vom Roboter erfasst werden kann.
gear_potentiometer_out_of_bounds=Du versuchst den Potentiometerwert des Getriebes des Roboters in einem Bereich zu messen, der au\u00DFerhalb des Messbereichs liegt. Verwende eine ganze Zahl zwischen 0 und 100.
interrupted_loop_sensing_robot=Der [bc]%BLOCKNAME[/bc] Baustein verhindert w\u00E4hrend seiner Ausf\u00FChrung die \u00DCberpr\u00FCfung der Bedingung im [bc]%THENELSE[/bc] Baustein. Es kann also sein, dass die Bedingung eintritt, aber dein Skript nicht passend reagiert, da es zu diesem Zeitpunkt mit dem '%BLOCKNAME' Baustein besch\u00E4ftigt ist. \u00DCberlege, ob du die Pr\u00FCfung parallel (in einem eigenen Skript) durchf\u00FChren kannst.
led_off_script=Super! Du hast ein Skript, um die LEDs ausschalten zu k\u00F6nnen.
led_off_script_missing=LEDs k\u00F6nnen angeschaltet werden, aber es fehlt ein Skript, welches sie wieder abschaltet.
line_following_in_bounds=Gro\u00DFartig! Du misst mit dem Linienverfolgungssensor einen Wert der im Messbereichs des Sensors liegt.
line_following_out_of_bounds=Du versucht mit dem Linienverfolgungssensor einen Wert zu messen, der au\u00DFerhalb des Messbereichs des Sensors liegt. Verwende nur ganze Zahlen zwischen 0 und 3.
loop_sensing_robot=Gut gemacht! Damit du auch ganz sicher kein Ereignis verpasst, fragst du kontinuierlich nach diesem Ereignis in einer endlosen Wiederholung.
looped_statement_not_stopped=Ressourcen wie Motoren oder Lampen werden durch ihren jeweiligen Stopp-Baustein nicht gestoppt, wenn der ausf\u00FChrende Baustein in einer Schleife ist. Hier wird ein [sbi]stoppe [alles v][/sbi]-Baustein ben\u00F6tigt.
loudness_in_bounds=Gro\u00DFartig! Du vergleichst die Lautst\u00E4rke mit Werten im Messbereich des Sensors.
loudness_out_of_bounds=Du versuchst die Lautst\u00E4rke in einem Bereich zu messen, der au\u00DFerhalb des Messbereichs liegt. Verwende einen Lautst\u00E4rkewert zwischen 0 und 100.
matrix_off_script=Super! Du hast ein Skript, um die LED Matrix ausschalten zu k\u00F6nnen.
matrix_off_script_missing=Die Matrix kann angeschaltet werden, aber es fehlt ein Skript, welches sie wieder abschaltet.
missing_loop_robot_sensing=Die hervorgehobene Bedingung wird in dem Skript nur einmal \u00FCberpr\u00FCft. Das Skript l\u00E4uft dadurch zu schnell durch. Umschlie\u00DFe die bedingte Anweisung mit dem Baustein [sbi]wiederhole fortlaufend[/sbi], um etwas wiederholt zu \u00FCberpr\u00FCfen.
motor_low_power=Die Motoren des MBot brauchen mindestens 50% Power um zuverl\u00E4ssig fahren zu k\u00F6nnen.
motor_off_script=Super! Du hast ein Skript, um die Motoren ausschalten zu k\u00F6nnen.
motor_power_in_bounds=Super! Du verwendest eine Leistungsangabe im Leistungsbereich des Motors.
motor_power_minus=Du verwendest eine negative Leistungsangabe f\u00FCr den Motor. Der Roboter f\u00FChrt damit in die entgegengesetzte Richtung. Um das Program lesbarer zu machen, solltest du den Baustein f\u00FCr diese Richtung verwenden.
motor_power_out_of_bounds=Motorleistung wird in Prozent angegeben und kann sich deswegen nur zwischen 0 und 100 befinden.
motor_stop_script_missing=Motor kann angeschaltet werden, aber es fehlt ein Skript, welches ihn wieder abschaltet.
multiple_attribute_modifications_robot=Es gibt mehrere \u00C4nderungen der gleichen Variable oder des gleichen Attributs hintereinander, die zusammengefasst werden k\u00F6nnten.
multiple_attribute_modifications_custom_robot=Es gibt mehrere \u00C4nderungen von %VARIABLE hintereinander, die zusammengefasst werden k\u00F6nnten.
parallel_board_launch_script=MBots k\u00F6nnen im Hochlademodus keine parallelen Skripte ausf\u00FChren.
parallel_resource_use=Ressourcen wie Motoren oder Lampen k\u00F6nnen zu Problemen f\u00FChren, wenn sie von zwei Skripten parallel angesteuert werden.
parallelisation_robot=Toll! Du startest mindestens zwei Skripte durch dasselbe Ereignis. Das Konzept von Parallelisierung kannst du somit bereits gut umsetzen.
pitch_angle_in_bounds=Super! Du vergleichst den Pitchwinkel im Messbereich des Sensors.
pitch_angle_out_of_bounds=Du versuchst den Pitchwinkel des Roboters in einem Bereich zu messen, der au\u00DFerhalb des Messbereichs liegt. Verwende eine ganze Zahl zwischen -180 und 180.
rocky_light_off_script=Super! Du hast ein Skript, um das Rocky Licht ausschalten zu k\u00F6nnen.
rocky_light_off_script_missing=Das Codey Licht kann angeschaltet werden, aber es fehlt ein Skript, welches es wieder abschaltet.
roll_angle_in_bounds=Gro\u00DFartig! Du vergleichst den Rollwinkel im Messbereich des Sensors.
roll_angle_out_of_bounds=Du versuchst den Rollwinkel des Roboters in einem Bereich zu messen, der au\u00DFerhalb des Messbereichs liegt. Verwende eine ganze Zahl zwischen -90 und 90.
sensor_value_equals=Sensoren k\u00F6nnen selten exakte, zuverl\u00E4ssige Werte messen. Hierf\u00FCr sollten Wertebereiche verwendet werden.
shaking_strength_in_bounds=Gro\u00DFartig! Du vergleichst die Vibrationsst\u00E4rke im Messbereich des Sensors.
shaking_strength_out_of_bounds=Du versuchst die Vibrationsst\u00E4rke in einem Bereich zu messen, der au\u00DFerhalb des Messbereichs liegt. Verwende eine ganze Zahl zwischen 0 und 100.
timed_statement_in_live_loop=Wenn ein zeitlich begrenzter Baustein alleine in einer Wiederholungsschleife ausgef\u00FChrt wird, dann stottert die Ausführung im Live Modus.
timed_statement_in_possible_live_loop=Dieser Code kann im Live Modus ausgef\u00FChrt werden. Wenn ein zeitlich begrenzter Baustein alleine in einer Wiederholungsschleife ausgef\u00FChrt wird, dann stottert dies Ausführung im Live Modus.
ultra_sonic_in_bounds=Gro\u00DFartig! Du vergleichst den Wert des Ultraschallsensors im Messbereich.
ultra_sonic_out_of_bounds=Du versuchst mit dem Ultraschallsensor eine Entfernung zu messen, die au\u00DFerhalb des Messbereichs des Senors liegt. Verwende eine Entfernung im Bereich zwischen 3cm und 400cm.
unnecessary_time_robot=Du benutzt einen Baustein, der über eine bestimmte Zeit ausgeführt wird. Da der Zeitwert 0 ist, hat der Baustein keinen Effekt. Du kannst ihn l\u00F6schen.
